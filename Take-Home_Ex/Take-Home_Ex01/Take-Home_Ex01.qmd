---
title: "Take-Home Exercise 01"
author: "Bhairavi Vairavelu"
date: "Sep 02 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# Geospatial Analytics for Public Good

## 1. Overview

Road traffic accidents result in significant human and economic costs worldwide, with approximately 1.19 million deaths annually and 20-50 million non-fatal injuries, particularly affecting vulnerable road users. In Thailand, about 20,000 people die each year, making it one of the deadliest countries for road accidents. Accidents frequently occur on national highways, with 66% happening on straight roads and specific high-risk zones like curves, intersections and steep slopes.

## 2. Getting Started

### 2.1 Objectives

This analysis aims to discover factors that influence road traffic accidents by examining both behavioural and environmental causes through spatial and spatio-temporal point patterns. This includes:

1.  Visualizing spatio-temporal dynamics of accidents

2.  Conducting spatial analysis using Network Spatial Point Patterns Analysis

3.  Conducting spatio-temporal analysis using Temporal Network Spatial Point Patterns Analysis

### 2.2 The Study Area

The focus of this study would be the Bangkok Metropolitan Region (BMR).

![](BMR.png){fig-align="center" width="450"}

Note: The projected coordinate system of Thailand is WGS84/UTM zone 47N, and the EPSG code is 32647.

### 2.3 Analytical Tools

The p_load function of pacman package is used to install and loads the analytical tools that we will be using throughout this exercise.

```{r}
pacman::p_load(sf, tidyverse, tmap, Hmisc, lubridate)
```

-   sf for importing, managing, and processing geospatial data

-   tidyverse for performing data science tasks such as importing, wrangling and visualizing data

-   tmap for visualizing geospatial objects

-   Hmisc for summary statistics

## 3. Data

### 3.1 Getting the Data

Three basic data sets will be used for this analysis:

1.  Thailand Road Accident \[2019-2022\] on Kaggle

2.  Thailand Roads (OpenStreetMap Export) on HDX

3.  Thailand - Subnational Administrative Boundaries on HDX

#### 3.1.1 Thailand Road Accidents

![](Data01.png){fig-align="center"}

Link: <https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022>

Note: Kaggle account is required in order to download this dataset.

#### 3.1.2 Thailand Roads

![](Data02.png){fig-align="center"}

Link: <https://data.humdata.org/dataset/hotosm_tha_roads>

#### 3.1.3 Thailand - Subnational Administrative Boundaries

![](Data03_1.png){fig-align="center"}

Link: <https://data.humdata.org/dataset/cod-ab-tha?>

### 3.2 Storing the Data

At the Take-Home_Ex01 folder, we will create a sub-folder called data. Then, inside this sub-folder, we will create two new sub-folders and name them geospatial and aspatial respectively.

#### 3.2.1 Geospatial Data Sets

We will place the following data files into the geospatial sub-folder:

1.  hotosm_tha_roads_lines_shp.shp

2.  tha_admbndp_admALL_rtsd_itos_20220121.shp

#### 3.2.2 Aspatial Data Sets

We call a data set an aspatial data set because among its data fields, there are two fields that capture the x- and y-coordinates of the data points.

We will place the following data files into the aspatial sub-folder:

1.  thai_road_accident_2019_2022.csv

### 3.3 Importing the Data

#### 3.3.1 Thailand Roads Data

The code chunk below uses st_read() function of sf package to import the hotosm_tha_roads_lines_shp.shp shapefile into R as a simple feature data frame. For this code chunk, we will define the data path and the layer to provide the shapefile name.

```{r}
#|eval: false
thaiRoads = st_read(dsn = "data/geospatial",
                        layer = "hotosm_tha_roads_lines_shp")
write_rds(thaiRoads, "data/rds/thaiRoads.rds")
```

```{r}
thaiRoads <- read_rds("data/rds/thaiRoads.rds")
```

The message above reveals that there are a total of 2792590 features and 15 fields in thaiRoads linestring feature data frame, and it the coordinate system (CRS) is currently NA.

#### 3.3.2 Thailand - Subnational Administrative Boundaries Data

Likewise, the code chunk below will use the st_read() function of sf package to import the tha_admbndp_admALL_rtsd_itos_20220121.shp shapefile into R as a simple feature data frame.

```{r}
#|eval: false
admBndrs = st_read(dsn = "data/geospatial",
                        layer = "tha_admbndp_admALL_rtsd_itos_20220121")
write_rds(admBndrs, "data/rds/admBndrs.rds")
```

```{r}
admBndrs <- read_rds("data/rds/admBndrs.rds")
```

The message above reveals that there are a total of 7425 features and 24 fields in admBndrs point feature data frame, and it is in wgs84 coordinates system.

#### 3.3.3 Thailand Road Accidents Data

Since thai_road_accident_2019_2022.csv data file is in csv file format, we will use the read_csv() of readr package to import this data as shown in the code chunk below. Note that the output will be in a tibble data frame format.

```{r}
#|eval: false
accidents <- read_csv("data/aspatial/thai_road_accident_2019_2022.csv")
write_rds(accidents, "data/rds/accidents.rds")
```

```{r}
accidents <- read_rds("data/rds/accidents.rds")
```

The message above reveals that there are a total of 81735 rows and 18 fields in accidents tibble data frame.

## 4. Data Wrangling

### 4.1 Aspatial Data Wrangling

#### 4.1.1 Contents of Aspatial Data

Let us examine if the accidents data was imported correctly using the list() function of Base R.

```{r}
list(accidents)
```

The output states that the accidents tibble data frame consists of 81735 rows and 18 columns.

#### 4.1.2 Removing Columns

It is likely that not all 18 columns are required/useful for our analysis, especially when some of the columns contain values that are not in English (province_th & route). 

On top of this, there are 2 date columns in the data set - incident_datetime which represents when the accident occurred, and report_datetime which represent when the accident was reported. For the accuracy of our analysis, we only want to focus on when the accident occurred. Hence, we will remove this column as well. 

We will use the select() function from dplyr package to select the accidents data frame variables by index, and exclude the indexes of the columns that we want to remove.

```{r}
accidents <- accidents %>%
  select(1:2, 5:6, 8:18)
list(accidents)
```

The output confirms that we have dropped 3 columns, and now only have 15 columns in our accidents data frame.

#### 4.1.3 Adding Columns

We also want to add new columns which could potentially help with our analysis later on, namely Season, Day of Week and Time of Day. Reference was taken from the following link to determine the Seasons for BMR.

Link: <https://www.thomascook.in/international-tourism/best-time-to-visit-bangkok#:~:text=The%20weather%20in%20Bangkok%20is,best%20time%20to%20visit%20Bangkok>

```{r}
accidents <- accidents %>%
  mutate(
    dayofweek = wday(incident_datetime, label = TRUE, abbr = TRUE),
    month = month(incident_datetime, label = TRUE, abbr = TRUE),
    season = case_when(
      month(incident_datetime) %in% c(1:2, 11:12) ~ "Winter", 
      month(incident_datetime)  %in% 3:6 ~ "Summer", 
      month(incident_datetime)  %in% 7:10 ~ "Rainy"))
list(accidents)
```

The output confirms that we have added 3 new columns, and now we have 18 columns in our accidents data frame.

#### 4.1.4 Focus on Study Area

Note that the accidents data frame has a total of 81,735 rows. We want to only focus on the study area, BMR, in our analysis. Hence, we will filter the province field to focus on the 6 provinces which are in the BMR: Bangkok, Nakhon Pathom, Pathum Thani, Nonthaburi, Samut Prakan and Samut Sakhon. We will store these province names in a list and use it in our filter condition.

```{r}
bmr <- c("Nakhon Pathom", "Pathum Thani", "Nonthaburi", "Samut Prakan", "Samut Sakhon", "Bangkok")
accidents <- accidents %>%
  filter(province_en %in% bmr)
list(accidents)
```

Note that after the filter is applied, the accidents data frame has been reduced to having only 13,336 rows.

#### 4.1.5 Handling Missing Values

Moving forward, we will be utilizing two useful columns - latitude and longitude. Note that they are in decimal degree format. The filter() function of dplyr package can be used to verify if these key columns have any missing values.

```{r}
accidents %>%
  filter(is.na(longitude) | longitude == "",
         is.na(latitude)  | latitude == "")
```

The output proves that there are 359 rows which contain missing values for the latitude and longitude columns. To handle this issue, we will re-use the filter() function to exclude these missing values from our tibble data frame.

```{r}
accidents <- accidents %>%
  filter(!is.na(longitude) | longitude != "",
         !is.na(latitude)  | latitude != "")
```

Let us verify if the rows with missing values have been dropped by re-running our initial code chunk.

```{r}
accidents %>%
  filter(is.na(longitude) | longitude == "",
         is.na(latitude)  | latitude == "")
```

The message above confirms that the rows with missing values have been excluded.

#### 4.1.6 Handling Duplicates

We also want to avoid the repetition of records, which could lead to incorrect analysis of accidents. Hence, we will check for duplicates using group_by_all() to ensure the integrity of our data.

```{r}
duplicates <- accidents %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
duplicates
```

The message above confirms that there are no duplicated records in our accidents tibble data frame, which is great!

#### 4.1.7 Creating Simple Feature Data Frame

Next, the code chunk below helps to converts the accidents tibble data frame into a simple feature data frame by using st_as_sf() of sf packages.

As mentioned previously, the projected coordinate system of Thailand is WGS84/UTM zone 47N, and the EPSG code is 32647. Hence, we will set the following arguments accordingly:

-   coords argument to specify the column names to use for x- and y-coordinates
-   crs argument to specify the coordinates system in epsg format, EPSG:4326 for wgs84 and EPSG:32647 for Thailand's projected coordinate system

```{r}
#|eval: false
accidents_sf <- st_as_sf(accidents, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 32647)
write_rds(accidents_sf, "data/rds/accidents_sf.rds")
```

We can utilize glimpse() function of dplyr package to retrieve information related to the contents of this new accidents_sf simple feature data frame.

```{r}
accidents_sf <- read_rds("data/rds/accidents_sf.rds")
glimpse(accidents_sf)
```

Note that a new column called geometry has been added into the data frame. Also, the columns longitude and latitude have been dropped from the data frame.

### 4.2 Geospatial Data Wrangling

#### 4.2.1 Contents of Geospatial Data

Let us examine the contents of the simple feature data frames by utilizing the glimpse() function of dplyr package again, which also helps to reveal the data type of each field.

```{r}
glimpse(thaiRoads)
```

The output states that the thaiRoads simple feature data frame consists of 2,793,590 rows and 15 columns.

```{r}
glimpse(admBndrs)
```

The output states that the admBndrs simple feature data frame consists of 7,425 rows and 24 columns. Note that there are 4 administrative levels in this data set - level 0 for country, level 1 for province, level 2 for district, and level 3 for sub-district boundaries.

#### 4.2.2 Removing Columns

For both the thaiRoads and admBndrs data frames, we will be removing columns which do not contain values in English. 

On top of this, We will also be removing columns from thaiRoads data frame which might not be helpful for our analysis - source, osm_id & osm_type.

Similar to our previous step in Aspatial Data Wrangling, we will use the select() function from dplyr package to select the variables we want to retain by index, and exclude the indexes of the columns that we want to remove.

```{r}
thaiRoads <- thaiRoads %>%
  select(2:10, 15)
glimpse(thaiRoads)
```

The thaiRoads simple feature data frame now only consists of 10 columns.

Likewise, we will be removing columns from admBndrs data frame which might not be helpful for our analysis, keeping only the key variables we want to use for our analysis.

```{r}
admBndrs <- admBndrs %>%
  select(1:3, 11, 14, 24)
glimpse(admBndrs)
```

The admBndrs simple feature data frame now only consists of 6 columns.

#### 4.2.3 Focus on Study Area

##### 4.2.3.1 Highway

Taking reference from the below link, we will filter the highway field of thaiRoads data frame to focus on the 5 key highway variables: motorway, primary, secondary, tertiary and unclassified. We will store these highway values in a list and use it in our filter condition. 

Link: <https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Highway_classification>

```{r}
highways <- c("motorway", "primary", "secondary", "tertiary", "unclassified")
thaiRoads <- thaiRoads %>%
  filter(highway %in% highways)
glimpse(thaiRoads)
```

Note that after the filter is applied, the thaiRoads data frame has been reduced to having only 188,596 rows, compared to the original 2,792,590 rows.

##### 4.2.3.2 Province

To recap - there were originally 4 administrative levels in this admBndrs data set; level 0 for country, level 1 for province, level 2 for district, and level 3 for sub-district boundaries. 

We want to only focus on the study area, BMR, in our analysis. Hence, we will filter the ADM1_EN field to focus on the 6 provinces which are in the BMR: Bangkok, Nakhon Pathom, Pathum Thani, Nonthaburi, Samut Prakan and Samut Sakhon. We will store these province names in a list and use it in our filter condition.

```{r}
bmr <- c("Nakhon Pathom", "Pathum Thani", "Nonthaburi", "Samut Prakan", "Samut Sakhon", "Bangkok")
admBndrs <- admBndrs %>%
  filter(ADM1_EN %in% bmr)
glimpse(admBndrs)
```

Note that after the filter is applied, the admBndrs data frame has been reduced to having only 477 rows, compared to the original 7425 rows.

#### 4.2.4 Converting Multilinestring to Linestring

For our spatio-temporal analysis, we require the thaiRoads data frame's geometry field to be a LINESTRING object instead of a MULTILINESTRING object. To do this, we will utilize the st_cast() function from sf package to convert geometry from MULTILINESTRING to LINESTRING.

```{r}
thaiRoads$geometry <- st_cast(thaiRoads$geometry, "LINESTRING")
glimpse(thaiRoads)
```

Note that the geometry field has been updated to contain LINESTRING objects now, instead of the original MULTILINESTRING objects.

#### 4.2.5 Coordinate Systems

As mentioned previously, the projected coordinate system of Thailand is WGS84/UTM zone 47N, and the EPSG code is 32647.

##### 4.2.5.1 Checking CRS

We can use st_crs() of sf package to identify the coordinate system of a simple feature data frame.

```{r}
st_crs(accidents_sf)
```

The message above shows that, since we manually transformed this aspatial tibble data frame to a simple feature data frame, the coordinate system of accidents_sf is correctly assigned.

```{r}
st_crs(thaiRoads)
```

The message above shows that there is no assignment of coordinate system for thaiRoads simple feature data frame.

```{r}
st_crs(admBndrs)
```

The message above shows that the admBndrs simple feature data frame is in wgs84 coordinate system, with EPSG:4326.

##### 4.2.5.2 Assigning EPSG Codes

Since thaiRoads simple feature data frame has no assignment, we will use the below code chunk to assign the EPSG code to it.

```{r}
#|eval: false
thaiRoads_sf <- st_set_crs(thaiRoads, 32647)
write_rds(thaiRoads_sf, "data/rds/thaiRoads_sf.rds")
```

Let us display the content of thaiRoads_sf to verify the updated coordinate system information.

```{r}
thaiRoads_sf <- read_rds("data/rds/thaiRoads_sf.rds")
st_crs(thaiRoads_sf)
```

Note that the EPSG code for thaiRoads data frame has been assigned to 32647 now.

##### 4.2.5.3 Transforming Projection

As the admBndrs simple feature data frame is in wgs84 coordinate system, we will perform projection transformation using the code chunk below. 

```{r}
#|eval: false
admBndrs_sf <- st_transform(admBndrs, 
                            crs = 32647)
write_rds(admBndrs_sf, "data/rds/admBndrs_sf.rds")
```

Let us display the content of admBndrs_sf to verify the updated coordinate system information.

```{r}
admBndrs_sf <- read_rds("data/rds/admBndrs_sf.rds")
st_crs(admBndrs_sf)
```

Note that the EPSG code for admBndrs_sf data frame has been assigned to 32647 now.


## 5. Plotting Geospatial Data

We will use plot() of R Graphic to visualize the geospatial features of our geospatial simple feature data frames.

```{r}
# plot(accidents_sf)
```

x

```{r}
# plot(thaiRoads32647)
```

x

```{r}

```

x

xx...
