{
  "hash": "7768cd53bc21d847fa872ab1394843b7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 03A\"\nauthor: \"Bhairavi Vairavelu\"\ndate: \"Oct 21 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# **Modelling Geography of Financial Inclusion with Geographically Weighted Methods**\n\n## 1.0 Overview\n\nFinancial inclusion is the availability and equality of opportunities to access financial services. It refers to processes by which individuals and businesses can access appropriate, affordable, and timely financial products and services. These financial products and services include banking, loan, equity, and insurance products. It provides paths to enhance inclusiveness in economic growth by enabling the unbanked population to access the means for savings, investments, and insurance towards improving household income and reducing income inequality.\n\n### 1.1 Tasks\n\nIn this exercise, we will be building an explanatory model to determine factors affecting financial inclusion by using geographical weighted regression methods.\n\n### 1.2 Study Area\n\nWe will be focusing on the FinScope Tanzania 2023 dataset for this exercise, and conduct our analysis at the district level.\n\n### 1.3 Analysis Method\n\nGeographically Weighted Regression (GWR) is the spatial statistical technique that we will use in this exercise. GWR takes non-stationary variables into consideration, and models the local relationships between these independent variables, and an outcome of interest. For this exercise, the dependent variable is xx, and the independent variables are divided into either structural (?) and locational (?).\n\n## 2.0 Data\n\nFor the purpose of this exercise, we will be using two datasets:\n\n-   FinScope Tanzania 2023, which contains individual survey interview data\n\n-   Tanzania geoBoundaries, which is a district level boundary GIS data\n\n## 3.0 Installing and Launching Packages\n\nWe intend to utilize the following R packages in this exercise:\n\n-   **olsrr**, for building OLS and performing diagnostic tests\n\n-   **corrplot**, for multivariate data visualization and analysis\n\n-   **ggpubr**, to customize ggplot2-based plots\n\n-   **sf**, for spatial data handling\n\n-   **spdep**, to create spatial weights matrix objects from polygon\n\n-   **GWmodel**, for calibrating geographically weighted family of models\n\n-   **tmap**, for visualizing geospatial objects\n\n-   **tidyverse**, for attribute data handling,\n\n-   **gtsummary**, to create analytical and summary tables\n\n-   **ggstatsplot**, to create graphics with details from statistical tests included in the plots\n\n-   **sfdep**, for computing spatial weights and autocorrelation statistics\n\nThe code chunk below can be used to install and launch the above-mentioned R packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary, ggstatsplot, sfdep)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nalso installing the dependency 'glue'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2/PACKAGES'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  There are binary versions available but the source versions are later:\n          binary source needs_compilation\nglue       1.7.0  1.8.0              TRUE\ngtsummary  1.7.2  2.0.3             FALSE\n\n  Binaries will be installed\npackage 'glue' successfully unpacked and MD5 sums checked\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: cannot remove prior installation of package 'glue'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in file.copy(savedcopy, lib, recursive = TRUE): problem copying\nC:\\R-4.2.2\\library\\00LOCK\\glue\\libs\\x64\\glue.dll to\nC:\\R-4.2.2\\library\\glue\\libs\\x64\\glue.dll: Permission denied\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: restored 'glue'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nThe downloaded binary packages are in\n\tC:\\Users\\bhair\\AppData\\Local\\Temp\\RtmpmY6fjN\\downloaded_packages\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\ninstalling the source package 'gtsummary'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in utils::install.packages(package, ...): installation of package\n'gtsummary' had non-zero exit status\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in p_install(package, character.only = TRUE, ...):\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in library(package, lib.loc = lib.loc, character.only = TRUE,\nlogical.return = TRUE, : there is no package called 'gtsummary'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in pacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, : Failed to install/load:\ngtsummary\n```\n\n\n:::\n:::\n\n\n## 4.0 Geospatial Data Wrangling\n\n### 4.1 Importing Geospatial Data\n\nThe geospatial data used in this exercise, the Tanzania geoBoundaries district level data, is in ESRI shapefile format.\n\nThe code chunk below imports this shapefile by using st_read() of sf packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngb = st_read(dsn = \"data/geospatial\", layer = \"geoBoundaries-TZA-ADM2\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `geoBoundaries-TZA-ADM2' from data source \n  `C:\\byebhai8\\ISSS626-GeospatialAnalytics\\Take-Home_Ex\\Take-Home_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 170 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 29.58953 ymin: -11.76235 xmax: 40.44473 ymax: -0.983143\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nThe report above shows that the R object used to contain the imported shapefile is called gb, and it is a simple feature object. The geometry type is multipolygon, and the gb simple feature object does not have any EPSG information. These multipolygon features are used to represent the geographic boundaries, and the GIS data is in WGS84 format. Also, the dataset contains 170 rows and 6 columns.\n\n### 4.2 Updating CRS Information\n\nIt is noted that the correct EPSG code for Tanzania is EPSG: 4210, which can be verified here: LINK HERE\n\nAs such, we will use the code chunk below to update the newly imported gb simple feature data frame with the correct EPSG code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngbTransformed <- st_transform(gb, 4210)\n```\n:::\n\n\nAfter transforming the projection metadata, we can verify the projection of the newly transformed gbTransformed by using st_crs() of sf package. This can be achieved by using the code chunk below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(gbTransformed)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:4210 \n  wkt:\nGEOGCRS[\"Arc 1960\",\n    DATUM[\"Arc 1960\",\n        ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Geodesy.\"],\n        AREA[\"Burundi, Kenya, Rwanda, Tanzania and Uganda.\"],\n        BBOX[-11.75,28.85,4.63,41.91]],\n    ID[\"EPSG\",4210]]\n```\n\n\n:::\n:::\n\n\nNote that the EPSG is indicated as 4210 now. We can now use the st_bbox() of sf package to reveal the extent of gbTransformed, as shown in the code chunk below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_bbox(gbTransformed)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       xmin        ymin        xmax        ymax \n 29.5889305 -11.7623492  40.4438581  -0.9804983 \n```\n\n\n:::\n:::\n\n\nxx to elaborate what this st_bbox() does and what it means\n\nTo move this into EDA:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(gbTransformed) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03A1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nx\n\n### 4.3 Converting Multipolygon to Polygon\n\nIt is noted that the gbTransformed simple feature data frame contains the geometry object in multipolygon type. However, we require the data to be of polygon type instead for our analysis. As such, we will use convert multipolygon to polygon.\n\nThe first step would be to calculate the area of each polygon, which can be done using the code chunk below: (need to do a rename at the beginning instead?)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngbPolygon <- gbTransformed %>%\n  st_cast(\"POLYGON\") %>%\n  rename(district = shapeName) %>%\n  mutate(area = st_area(.))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in st_cast.sf(., \"POLYGON\"): repeating attributes for all\nsub-geometries for which they may not be constant\n```\n\n\n:::\n:::\n\n\nNext, we will group the unique districts together and select the largest polygon by area using the code chunk below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngbCleaned <- gbPolygon %>%\n  group_by(district) %>%\n  filter(area == max(area)) %>%\n  ungroup() %>%\n  select(-area) %>%\n  select(district)\n```\n:::\n\n\nWe can run our visualization again to verify how the polygons plot now in the map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(gbCleaned) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03A1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nTo have a better comparison, we can plot both the multipolygon map and polygon map side by side:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 <- tm_shape(gbTransformed) +\n  tm_polygons()\n\nmap2 <- tm_shape(gbCleaned) +\n  tm_polygons()\n\ntmap_arrange(map1, map2)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03A1_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nx\n\n## 5.0 Aspatial Data Wrangling\n\n### 5.1 Importing Aspatial Data\n\nThe code chunk below uses read_csv() of readr package to import the csv file into R as a tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntz = read_csv(\"data/aspatial/FinScope Tanzania 2023_Individual Main Data_FINAL.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 9915 Columns: 721\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (703): reg_name, dist_name, ward_code1, ward_name, ea_code, clustertype,...\ndbl  (13): SN, reg_code, dist_code, c8c, D6_1_1, D6_1_2, D6_1_3, gov_3, cmg4...\nlgl   (5): e_5_1, e_5_2, g_5_2__5, g_5_2__13, serv2_4\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nThe report above shows that the R object used to contain the imported attribute data is called tz, and it is a tibble data frame. Also, the dataset contains 9915 rows and 721 columns.\n\nAfter importing the file, it is important for us to examine if the file has been imported correctly. To do this, we will use head to display the first couple of rows of tz data frame .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(tz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 721\n     SN reg_name      reg_code dist_code dist_name ward_code1 ward_name ea_code\n  <dbl> <chr>            <dbl>     <dbl> <chr>     <chr>      <chr>     <chr>  \n1  4529 Mwanza              19         7 Misungwi  251        Mondo     004    \n2  4245 Kagera              18         7 Missenyi  011        Kakunyu   001    \n3  8149 Mbeya               12         3 Kyela     283        Nkuyu     301    \n4  6763 Dodoma               1         3 Kongwa    123        Kibaigwa  301    \n5  7805 Dar es Salaam        7         2 Ilala     252        Majohe    029    \n6  8232 Singida             13         1 Iramba    053        Shelui    301    \n# ℹ 713 more variables: clustertype <chr>, c1 <chr>, c2 <chr>, c7 <chr>,\n#   c8c <dbl>, c9 <chr>, c10 <chr>, c11 <chr>, c8n_a1 <chr>, c8n_a2 <chr>,\n#   c8n_b1 <chr>, c8n_b2 <chr>, c8n_c1 <chr>, c8n_c2 <chr>, c8n_d1 <chr>,\n#   c8n_d2 <chr>, c8n_e1 <chr>, c8n_e2 <chr>, c8n_f1 <chr>, c8n_f2 <chr>,\n#   c12_1 <chr>, c12_2 <chr>, c12_3 <chr>, c12_4 <chr>, c22 <chr>, c14 <chr>,\n#   c15 <chr>, C16 <chr>, c16_unit <chr>, c17_1__1 <chr>, c17_1__2 <chr>,\n#   c17_1__3 <chr>, c17_1__4 <chr>, c17_1__5 <chr>, c17_1__6 <chr>, …\n```\n\n\n:::\n:::\n\n\nx\n\n### 5.2 Data Cleanup\n\nGiven that the tz tibble data frame contains 721 columns, we first want to cleanup the dataset and only retain the fields that we want to focus our analysis on. Some of the fields we can consider for our analysis are:\n\n1.  Overall Formal: this combines all variables that indicate formal financial service usage by an individual\n\n2.  Informal: this combines all variables that indicate informal financial service usage by an individual\n\n3.  Income Main: the main source of income for an individual\n\n4.  Dedicated Farmer: whether the individual is a dedicated farmer or not, meaning more than 50% of their income originates from farming\n\n5.  Banked: this combines all variables that indicate bank service usage by an individual\n\n6.  \\(MM\\) Mobile: this combines all variables that indicate mobile money usage by an individual\n\n7.  Insurance: this combines all variables that indicate any insurance usage by an individual\n\n8.  (Form) Investments: this combines all variables that indicate formal investment mechanisms usage by an individual\n\n9.  Pension: this combines all variables that indicate pension service usage by an individual\n\n-- to convert the above into a data table or something\n\nAs such,we will use the code chunk below to retain the columns that we intend to use for our analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntzCleaned <- tz %>%\n  select(1,5,9,714,715,718,720,703,702,709,706,705) %>%\n  rename(district = dist_name,\n         cluster = clustertype,\n         mobile_usage = MM,\n         bank_usage = BANKED,\n         pension_usage = PENSION,\n         insurance_usage = INSURANCE,\n         investment_usage = FORM_INVESTMENTS,\n         formal_finservice_usage = OVERALL_FORMAL,\n         informal_finservice_usage = INFORMAL,\n         main_income = IncomeMain,\n         dedicated_farmer = DEDICATED_FARMER)\n```\n:::\n\n\nWe also rename the columns etc...\n\nLet's do a glimpse to check the tzCleaned data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(tzCleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 9,915\nColumns: 12\n$ SN                        <dbl> 4529, 4245, 8149, 6763, 7805, 8232, 9411, 70…\n$ district                  <chr> \"Misungwi\", \"Missenyi\", \"Kyela\", \"Kongwa\", \"…\n$ cluster                   <chr> \"Rural\", \"Rural\", \"Urban\", \"Urban\", \"Urban\",…\n$ formal_finservice_usage   <chr> \"OVERALL_FORMAL\", \"OVERALL_FORMAL\", \"OVERALL…\n$ informal_finservice_usage <chr> \"INFORMAL incl SACCO AND CMG RISK CONTRIBUTI…\n$ main_income               <chr> \"Farmers and fishers\", \"Farmers and fishers\"…\n$ dedicated_farmer          <chr> \"Not Dedicated farmer\", \"Not Dedicated farme…\n$ bank_usage                <chr> \"Not Banked\", \"Not Banked\", \"Not Banked\", \"N…\n$ mobile_usage              <chr> \"MM\", \"Not MM\", \"MM\", \"MM\", \"MM\", \"MM\", \"MM\"…\n$ investment_usage          <chr> \"Not FORM_INVESTMENTS\", \"Not FORM_INVESTMENT…\n$ insurance_usage           <chr> \"0\", \"0\", \"INSURANCE\", \"0\", \"0\", \"0\", \"0\", \"…\n$ pension_usage             <chr> \"Not PENSION\", \"Not PENSION\", \"Not PENSION\",…\n```\n\n\n:::\n:::\n\n\n### 5.3 Performing Relational Join\n\nThe code chunk below will be used to update the gbCleaned with the attribute fields of tzCleaned dataframe. This will be performed using the left_join() of dplyr package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngbTZ <- left_join(gbCleaned,tzCleaned)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(district)`\n```\n\n\n:::\n:::\n\n\nelaborate so and so...\n\nx\n\n## 6.0 Exploratory Data Analysis\n\nx\n\n## 7.0 Financial Inclusion Model\n\nx\n\n## 8.0 Using gwModel\n\nx\n",
    "supporting": [
      "Take-Home_Ex03A1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}