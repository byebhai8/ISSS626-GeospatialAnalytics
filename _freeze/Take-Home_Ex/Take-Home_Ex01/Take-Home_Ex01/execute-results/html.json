{
  "hash": "5996bbfc0dbcc67e06262bf32301615f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 01\"\nauthor: \"Bhairavi Vairavelu\"\ndate: \"Sep 02 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# Geospatial Analytics for Public Good\n\n## 1. Overview\n\nRoad traffic accidents result in significant human and economic costs worldwide, with approximately 1.19 million deaths annually and 20-50 million non-fatal injuries, particularly affecting vulnerable road users. In Thailand, about 20,000 people die each year, making it one of the deadliest countries for road accidents. Accidents frequently occur on national highways, with 66% happening on straight roads and specific high-risk zones like curves, intersections and steep slopes.\n\n## 2. Getting Started\n\n### 2.1 Objectives\n\nThis analysis aims to discover factors that influence road traffic accidents by examining both behavioural and environmental causes through spatial and spatio-temporal point patterns. This includes:\n\n1.  Visualizing spatio-temporal dynamics of accidents\n\n2.  Conducting spatial analysis using Network Spatial Point Patterns Analysis\n\n3.  Conducting spatio-temporal analysis using Temporal Network Spatial Point Patterns Analysis\n\n### 2.2 The Study Area\n\nThe focus of this study would be the Bangkok Metropolitan Region (BMR).\n\n![](BMR.png){fig-align=\"center\" width=\"450\"}\n\nNote: The projected coordinate system of Thailand is WGS84/UTM zone 47N, and the EPSG code is 32647.\n\n### 2.3 Analytical Tools\n\nThe p_load function of pacman package is used to install and loads the analytical tools that we will be using throughout this exercise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse, tmap, Hmisc)\n```\n:::\n\n\n-   sf for importing, managing, and processing geospatial data\n\n-   tidyverse for performing data science tasks such as importing, wrangling and visualizing data\n\n-   tmap for visualizing geospatial objects\n\n-   Hmisc for summary statistics\n\n## 3. Data\n\n### 3.1 Getting the Data\n\nThree basic data sets will be used for this analysis:\n\n1.  Thailand Road Accident \\[2019-2022\\] on Kaggle\n\n2.  Thailand Roads (OpenStreetMap Export) on HDX\n\n3.  Thailand - Subnational Administrative Boundaries on HDX\n\n#### 3.1.1 Thailand Road Accident \\[2019-2022\\] on Kaggle\n\n![](Data01.png){fig-align=\"center\"}\n\nLink: <https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022>\n\nNote: Kaggle account is required in order to download this dataset.\n\n#### 3.1.2 Thailand Roads (OpenStreetMap Export) on HDX\n\n![](Data02.png){fig-align=\"center\"}\n\nLink: <https://data.humdata.org/dataset/hotosm_tha_roads>\n\n#### 3.1.3 Thailand - Subnational Administrative Boundaries on HDX\n\n![](Data03_1.png){fig-align=\"center\"}\n\nLink: <https://data.humdata.org/dataset/cod-ab-tha?>\n\n### 3.2 Storing the Data\n\nAt the Take-Home_Ex01 folder, we will create a sub-folder called data. Then, inside this sub-folder, we will create two new sub-folders and name them geospatial and aspatial respectively.\n\n#### 3.2.1 Geospatial Data Sets\n\nWe will place the following data files into the geospatial sub-folder:\n\n1.  hotosm_tha_roads_lines_shp.shp\n\n2.  tha_admbndp_admALL_rtsd_itos_20220121.shp\n\n#### 3.2.2 Aspatial Data Sets\n\nWe call a data set an aspatial data set because among its data fields, there are two fields that capture the x- and y-coordinates of the data points.\n\nWe will place the following data files into the aspatial sub-folder:\n\n1.  thai_road_accident_2019_2022.csv\n\n### 3.3 Importing the Data\n\n#### 3.3.1 Importing Thailand Roads Data\n\nThe code chunk below uses st_read() function of sf package to import the hotosm_tha_roads_lines_shp.shp shapefile into R as a simple feature data frame. For this code chunk, we will define the data path and the layer to provide the shapefile name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiRoads = st_read(dsn = \"data/geospatial\",\n                        layer = \"hotosm_tha_roads_lines_shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `C:\\byebhai8\\ISSS626-GeospatialAnalytics\\Take-Home_Ex\\Take-Home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792590 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nCRS:           NA\n```\n\n\n:::\n:::\n\n\nThe message above reveals that there are a total of 2792590 features and 14 fields in thaiRoads linestring feature data frame, and it the coordinate system (CRS) is currently NA.\n\n#### 3.3.2 Importing Thailand - Subnational Administrative Boundaries Data\n\nLikewise, the code chunk below will use the st_read() function of sf package to import the tha_admbndp_admALL_rtsd_itos_20220121.shp shapefile into R as a simple feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmBndrs = st_read(dsn = \"data/geospatial\",\n                        layer = \"tha_admbndp_admALL_rtsd_itos_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbndp_admALL_rtsd_itos_20220121' from data source \n  `C:\\byebhai8\\ISSS626-GeospatialAnalytics\\Take-Home_Ex\\Take-Home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 7425 features and 23 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 97.49002 ymin: 5.734416 xmax: 105.5628 ymax: 20.43065\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nThe message above reveals that there are a total of 7425 features and 23 fields in admBndrs point feature data frame, and it is in wgs84 coordinates system.\n\n#### 3.3.3 Importing Thailand Road Accidents Data\n\nSince thai_road_accident_2019_2022.csv data file is in csv file format, we will use the read_csv() of readr package to import this data as shown in the code chunk below. Note that the output will be in a tibble data frame format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents <- read_csv(\"data/aspatial/thai_road_accident_2019_2022.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 81735 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (10): province_th, province_en, agency, route, vehicle_type, presumed_c...\ndbl   (6): acc_code, number_of_vehicles_involved, number_of_fatalities, numb...\ndttm  (2): incident_datetime, report_datetime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nThe message above reveals that there are a total of 81735 rows and 18 fields in accidents tibble data frame.\n\n## 4. Data Wrangling\n\n### 4.1 Aspatial Data Wrangling\n\n#### 4.1.1 Contents of Aspatial Data\n\nLet us examine if the accidents data was imported correctly using the list() function of Base R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(accidents)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# A tibble: 81,735 × 18\n   acc_code incident_datetime   report_datetime     provi…¹ provi…² agency route\n      <dbl> <dttm>              <dttm>              <chr>   <chr>   <chr>  <chr>\n 1   571905 2019-01-01 00:00:00 2019-01-02 06:11:00 ลพบุรี    Loburi  depar… แยกท…\n 2  3790870 2019-01-01 00:03:00 2020-02-20 13:48:00 อุบลราช… Ubon R… depar… เดชอุ…\n 3   599075 2019-01-01 00:05:00 2019-01-01 10:35:00 ประจวบ… Prachu… depar… ปราณ…\n 4   571924 2019-01-01 00:20:00 2019-01-02 05:12:00 เชียงใหม่ Chiang… depar… เชื่อม…\n 5   599523 2019-01-01 00:25:00 2019-01-04 09:42:00 นครสวร… Nakhon… depar… เกยไ…\n 6   571982 2019-01-01 00:30:00 2019-01-07 12:46:00 แม่ฮ่องส… Mae Ho… depar… แยกท…\n 7   612782 2019-01-01 00:30:00 2019-10-25 14:25:00 ชุมพร    Chumph… depar… ท่าทอ…\n 8   599235 2019-01-01 00:35:00 2019-01-02 16:23:00 สิงห์บุรี   Sing B… depar… ทางแ…\n 9   600643 2019-01-01 00:40:00 2019-01-11 10:01:00 สงขลา   Songkh… depar… ปากจ่…\n10   599105 2019-01-01 00:45:00 2019-01-01 10:11:00 ตราด    Trat    depar… บ่อไร่…\n# … with 81,725 more rows, 11 more variables: vehicle_type <chr>,\n#   presumed_cause <chr>, accident_type <chr>,\n#   number_of_vehicles_involved <dbl>, number_of_fatalities <dbl>,\n#   number_of_injuries <dbl>, weather_condition <chr>, latitude <dbl>,\n#   longitude <dbl>, road_description <chr>, slope_description <chr>, and\n#   abbreviated variable names ¹​province_th, ²​province_en\n```\n\n\n:::\n:::\n\n\nThe output reinforces that the accidents tibble data frame consists of 81735 rows and 18 columns. Moving forward, we will be utilizing two useful columns - latitude and longitude. Note that they are in decimal degree format. Let's assume that the data is in wgs84 coordinates system.\n\n#### 4.1.2 Handling Missing Values\n\nThe filter() function of dplyr package can be used to verify if our key columns - latitude and longitude, have any missing values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents %>%\n  filter(is.na(longitude) | longitude == \"\",\n         is.na(latitude)  | latitude == \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 359 × 18\n   acc_code incident_datetime   report_datetime     provi…¹ provi…² agency route\n      <dbl> <dttm>              <dttm>              <chr>   <chr>   <chr>  <chr>\n 1   823206 2019-01-02 21:30:00 2019-01-03 06:20:00 ไม่ทราบ  unknown depar… แยกท…\n 2   823207 2019-05-07 03:15:00 2019-05-14 15:37:00 ไม่ทราบ  unknown depar… แยกท…\n 3   823208 2019-05-15 11:45:00 2019-06-10 10:07:00 ไม่ทราบ  unknown depar… แยกท…\n 4   823209 2019-05-15 13:50:00 2019-06-10 10:04:00 ไม่ทราบ  unknown depar… แยกท…\n 5   823210 2019-08-01 08:00:00 2019-09-25 11:26:00 ไม่ทราบ  unknown depar… แยกท…\n 6   823211 2019-12-28 02:30:00 2019-12-29 06:04:00 ไม่ทราบ  unknown depar… แยกท…\n 7  1306220 2020-04-03 13:30:00 2020-05-05 12:50:00 ไม่ทราบ  unknown depar… แยกท…\n 8  2602971 2020-11-21 18:27:00 2020-11-22 11:31:00 ไม่ทราบ  unknown depar… แยกท…\n 9  5099638 2021-01-01 21:33:00 2021-11-02 07:52:00 กรุงเทพ… Bangkok expre… แจ้งวั…\n10  5099647 2021-01-10 14:26:00 2021-11-02 07:53:00 กรุงเทพ… Bangkok expre… ดินแด…\n# … with 349 more rows, 11 more variables: vehicle_type <chr>,\n#   presumed_cause <chr>, accident_type <chr>,\n#   number_of_vehicles_involved <dbl>, number_of_fatalities <dbl>,\n#   number_of_injuries <dbl>, weather_condition <chr>, latitude <dbl>,\n#   longitude <dbl>, road_description <chr>, slope_description <chr>, and\n#   abbreviated variable names ¹​province_th, ²​province_en\n```\n\n\n:::\n:::\n\n\nThe output proves that there are 359 rows which contain missing values for the latitude and longitude columns.\n\nTo handle this issue, we will re-use the filter() function to exclude these missing values from our tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents <- accidents %>%\n  filter(!is.na(longitude) | longitude != \"\",\n         !is.na(latitude)  | latitude != \"\")\n```\n:::\n\n\nLet us verify if the rows with missing values have been dropped by re-running our initial code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents %>%\n  filter(is.na(longitude) | longitude == \"\",\n         is.na(latitude)  | latitude == \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 18\n# … with 18 variables: acc_code <dbl>, incident_datetime <dttm>,\n#   report_datetime <dttm>, province_th <chr>, province_en <chr>, agency <chr>,\n#   route <chr>, vehicle_type <chr>, presumed_cause <chr>, accident_type <chr>,\n#   number_of_vehicles_involved <dbl>, number_of_fatalities <dbl>,\n#   number_of_injuries <dbl>, weather_condition <chr>, latitude <dbl>,\n#   longitude <dbl>, road_description <chr>, slope_description <chr>\n```\n\n\n:::\n:::\n\n\nThe message above confirms that the rows with missing values have been excluded.\n\n#### 4.1.3 Handling Duplicates\n\nWe want to avoid the repetition of records, which could lead to incorrect analysis of accidents. Hence, we will check for duplicates using group_by_all() to ensure the integrity of our data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate <- accidents %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  ungroup()\n\nduplicate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 18\n# … with 18 variables: acc_code <dbl>, incident_datetime <dttm>,\n#   report_datetime <dttm>, province_th <chr>, province_en <chr>, agency <chr>,\n#   route <chr>, vehicle_type <chr>, presumed_cause <chr>, accident_type <chr>,\n#   number_of_vehicles_involved <dbl>, number_of_fatalities <dbl>,\n#   number_of_injuries <dbl>, weather_condition <chr>, latitude <dbl>,\n#   longitude <dbl>, road_description <chr>, slope_description <chr>\n```\n\n\n:::\n:::\n\n\nThe message above confirms that there are no duplicated records in our accidents tibble data frame.\n\n#### 4.1.4 Creating Simple Feature Data Frame\n\nThe code chunk below converts the accidents tibble data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_sf <- st_as_sf(accidents, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 32647)\n```\n:::\n\n\nAs mentioned previously, the projected coordinate system of Thailand is WGS84/UTM zone 47N, and the EPSG code is 32647. Hence, we will set the following arguments accordingly:\n\n-   coords argument to specify the column names to use for x- and y-coordinates\n-   crs argument to specify the coordinates system in epsg format, EPSG:4326 for wgs84 and EPSG:32647 for Thailand's projected coordinate system\n\n### 4.2 Geospatial Data Wrangling\n\n#### 4.2.1 Contents of Geospatial Data\n\nLet us examine the contents of this newly created simple feature data frame by utilizing the glimpse() function of dplyr package, which helps to reveal the data type of each field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(accidents_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 81,376\nColumns: 17\n$ acc_code                    <dbl> 571905, 3790870, 599075, 571924, 599523, 5…\n$ incident_datetime           <dttm> 2019-01-01 00:00:00, 2019-01-01 00:03:00,…\n$ report_datetime             <dttm> 2019-01-02 06:11:00, 2020-02-20 13:48:00,…\n$ province_th                 <chr> \"ลพบุรี\", \"อุบลราชธานี\", \"ประจวบคีรีขันธ์\", \"เชียงใ…\n$ province_en                 <chr> \"Loburi\", \"Ubon Ratchathani\", \"Prachuap Kh…\n$ agency                      <chr> \"department of rural roads\", \"department o…\n$ route                       <chr> \"แยกทางหลวงหมายเลข 21 (กม.ที่ 31+000) - บ้านวั…\n$ vehicle_type                <chr> \"motorcycle\", \"private/passenger car\", \"mo…\n$ presumed_cause              <chr> \"driving under the influence of alcohol\", …\n$ accident_type               <chr> \"other\", \"rollover/fallen on straight road…\n$ number_of_vehicles_involved <dbl> 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, …\n$ number_of_fatalities        <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 3, 0, 0, 1, 0, 0, …\n$ number_of_injuries          <dbl> 2, 2, 0, 1, 0, 2, 2, 0, 0, 1, 1, 0, 1, 1, …\n$ weather_condition           <chr> \"clear\", \"clear\", \"clear\", \"clear\", \"clear…\n$ road_description            <chr> \"straight road\", \"straight road\", \"wide cu…\n$ slope_description           <chr> \"no slope\", \"no slope\", \"slope area\", \"no …\n$ geometry                    <POINT [m]> POINT (701480.8 1654653), POINT (113…\n```\n\n\n:::\n:::\n\n\nNote that a new column called geometry has been added into the data frame. Also, the columns longitude and latitude have been dropped from the data frame.\n\nLikewise, we can run the glimpse() function for bot the thaiRoads and admBndrs simple feature data frames.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(thaiRoads)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,792,590\nColumns: 15\n$ name       <chr> \"ถนนฉลองกรุง\", \"ซอยฉลองกรุง 1/1\", NA, NA, \"ถนนฉลองกรุง\", NA, \"…\n$ name_en    <chr> \"Chalong Krung Road\", \"Soi Chalong Krung 1/1\", NA, NA, \"Cha…\n$ highway    <chr> \"secondary\", \"residential\", \"secondary_link\", \"service\", \"s…\n$ surface    <chr> \"paved\", NA, NA, NA, \"concrete\", NA, NA, \"unpaved\", NA, NA,…\n$ smoothness <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ width      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ lanes      <chr> NA, NA, NA, NA, \"2\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ oneway     <chr> \"yes\", NA, \"yes\", NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA…\n$ bridge     <chr> NA, NA, NA, NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ layer      <chr> NA, NA, NA, NA, \"1\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ source     <chr> NA, NA, NA, NA, \"Bing\", NA, NA, \"GPS\", NA, NA, NA, NA, NA, …\n$ name_th    <chr> \"ถนนฉลองกรุง\", \"ซอยฉลองกรุง 1/1\", NA, NA, \"ถนนฉลองกรุง\", NA, \"…\n$ osm_id     <dbl> 1125681229, 594401607, 472283206, 594401608, 116847248, 317…\n$ osm_type   <chr> \"ways_line\", \"ways_line\", \"ways_line\", \"ways_line\", \"ways_l…\n$ geometry   <MULTILINESTRING> MULTILINESTRING ((100.7913 ..., MULTILINESTRING…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(admBndrs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 7,425\nColumns: 24\n$ Shape_Leng <dbl> 0.04769920, 0.03355050, 0.01728931, 0.01904576, 0.01523190,…\n$ Shape_Area <dbl> 1.284175e-04, 6.068479e-05, 1.769761e-05, 1.920433e-05, 1.2…\n$ ADM3_EN    <chr> \"Phraborom Maharatchawang\", \"Wang Burapha Phirom\", \"Wat Rat…\n$ ADM3_TH    <chr> \"พระบรมมหาราชวัง\", \"วังบูรพาภิรมย์\", \"วัดราชบพิธ\", \"สำราญราษฎร์\", \"…\n$ ADM3_PCODE <chr> \"TH100101\", \"TH100102\", \"TH100103\", \"TH100104\", \"TH100105\",…\n$ ADM3_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2_EN    <chr> \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\",…\n$ ADM2_TH    <chr> \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\",…\n$ ADM2_PCODE <chr> \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\",…\n$ ADM1_EN    <chr> \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Ban…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหาน…\n$ ADM1_PCODE <chr> \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ ORIG_FID   <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ geometry   <POINT [°]> POINT (100.4921 13.75129), POINT (100.4989 13.74391),…\n```\n\n\n:::\n:::\n\n\n#### 4.2.2 Coordinate Systems\n\nAs mentioned previously, the projected coordinate system of Thailand is WGS84/UTM zone 47N, and the EPSG code is 32647.\n\nWe can use st_crs() of sf package to identify the coordinate system of a simple feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(accidents_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\nThe message above shows that, since we manually transformed this aspatial tibble data frame to a simple feature data frame, the coordinate system of accidents_sf is correctly assigned.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thaiRoads)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System: NA\n```\n\n\n:::\n:::\n\n\nThe message above shows that there is no assignment of coordinate system for thaiRoads simple feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(admBndrs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\nThe message above shows that the admBndrs simple feature data frame is in wgs84 coordinate system.\n\n##### 4.2.2.1 Assigning EPSG Code\n\nSince thaiRoads simple feature data frame has no assignment, we will use the below code chunk to assign the EPSG code to it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiRoads32647 <- st_set_crs(thaiRoads, 32647)\n```\n:::\n\n\nLet us check the CSR again by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thaiRoads32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n##### 4.2.2.2 Transforming Projection\n\nAs the admBndrs simple feature data frame is in wgs84 coordinate system, we will perform projection transformation using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmBndrs32647 <- st_transform(admBndrs, \n                              crs = 32647)\n```\n:::\n\n\nLet us display the content of admBndrs32647 to verify the updated coordinate system information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(admBndrs32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\nxx\n\n## 5. Plotting Geospatial Data\n\nWe will use plot() of R Graphic to visualize the geospatial features of our geospatial simple feature data frames.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot(accidents_sf)\n```\n:::\n\n\nx\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot(thaiRoads32647)\n```\n:::\n\n\nx\n\n\n::: {.cell}\n\n:::\n\n\nx\n\nxx...\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}