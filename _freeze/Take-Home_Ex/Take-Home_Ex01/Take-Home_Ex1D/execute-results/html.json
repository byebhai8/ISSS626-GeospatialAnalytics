{
  "hash": "e72fbd0f4e373b652c356177b7e22e53",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 01\"\nauthor: \"Bhairavi Vairavelu\"\ndate: \"Sep 02 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# Geospatial Analytics for Public Good\n\n## 1. Overview\n\nRoad traffic accidents result in significant human and economic costs worldwide, with approximately 1.19 million deaths annually and 20-50 million non-fatal injuries, particularly affecting vulnerable road users. In Thailand, about 20,000 people die each year, making it one of the deadliest countries for road accidents. Accidents frequently occur on national highways, with 66% happening on straight roads and specific high-risk zones like curves, intersections and steep slopes.\n\n## 2. Getting Started\n\n### 2.1 Objectives\n\nThis analysis aims to discover factors that influence road traffic accidents by examining both behavioural and environmental causes through spatial and spatio-temporal point patterns. This includes:\n\n1.  Visualizing spatio-temporal dynamics of accidents\n\n2.  Conducting spatial analysis using Network Spatial Point Patterns Analysis\n\n3.  Conducting spatio-temporal analysis using Temporal Network Spatial Point Patterns Analysis\n\n### 2.2 The Study Area\n\nThe focus of this study would be the Bangkok Metropolitan Region (BMR).\n\n![](BMR2.png){fig-align=\"left\" width=\"300\"}\n\nNote: The projected coordinate system of Thailand is WGS84/UTM zone 47N, and the EPSG code is 32647.\n\n### 2.3 Analytical Tools\n\nThe p_load function of pacman package is used to install and loads the analytical tools that we will be using throughout this exercise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tidyverse, tmap, Hmisc, lubridate, spNetwork, ggplot2)\n```\n:::\n\n\n-   sf for importing, managing, and processing geospatial data\n\n-   sfdep for computing spatial weights and autocorrelation statistics\n\n-   tidyverse for performing data science tasks such as importing, wrangling and visualizing data\n\n-   tmap for visualizing geospatial objects\n\n-   Hmisc for summary statistics\n\n-   lubridate for parsing and manipulating dates\n\n-   spNetwork for spatial point pattern analysis\n\n-   ggplot2 for plotting graphs\n\n## 3. Data\n\n### 3.1 Getting the Data\n\nThree basic data sets will be used for this analysis:\n\n1.  Thailand Road Accident \\[2019-2022\\] on Kaggle\n\n![](Data01.png){fig-align=\"center\"}\n\nLink: <https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022>\n\nNote: a Kaggle account is required in order to download this dataset.\n\n2.  Thailand Roads (OpenStreetMap Export) on HDX\n\n![](Data02.png){fig-align=\"center\"}\n\nLink: <https://data.humdata.org/dataset/hotosm_tha_roads>\n\n3.  Thailand - Subnational Administrative Boundaries on HDX\n\n![](Data03_1.png){fig-align=\"center\"}\n\nLink: <https://data.humdata.org/dataset/cod-ab-tha?>\n\n### 3.2 Storing the Data\n\nAt the Take-Home_Ex01 folder, we will create a sub-folder called data. Then, within this sub-folder, we will organize the data sets accordingly:\n\n-   data/geospatial will store geospatial data\n\n-   data/aspatial will store aspatial data\n\n-   data/rds will be used to store the outputs we save so that we can reuse and make our code reproducible\n\n### 3.3 Importing the Data\n\n#### 3.3.1 Thailand Roads Data\n\nThe code chunk below uses st_read() function of sf package to import the hotosm_tha_roads_lines_shp shapefile into R as a simple feature data frame. For this code chunk, we will define the data path and the layer to provide the shapefile name. The output will be saved in rds format for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nthaiRoadsRaw = st_read(dsn = \"data/geospatial\",\n                        layer = \"hotosm_tha_roads_lines_shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `C:\\byebhai8\\ISSS626-GeospatialAnalytics\\Take-Home_Ex\\Take-Home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792590 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nCRS:           NA\n```\n\n\n:::\n\n```{.r .cell-code}\nwrite_rds(thaiRoadsRaw, \"data/rds/thaiRoadsRaw.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the saved thaiRoadsRaw.rds into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiRoadsRaw <- read_rds(\"data/rds/thaiRoadsRaw.rds\") %>%\n  rename(road = name_en)\nglimpse(thaiRoadsRaw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,792,590\nColumns: 15\n$ name       <chr> \"ถนนฉลองกรุง\", \"ซอยฉลองกรุง 1/1\", NA, NA, \"ถนนฉลองกรุง\", NA, \"…\n$ road       <chr> \"Chalong Krung Road\", \"Soi Chalong Krung 1/1\", NA, NA, \"Cha…\n$ highway    <chr> \"secondary\", \"residential\", \"secondary_link\", \"service\", \"s…\n$ surface    <chr> \"paved\", NA, NA, NA, \"concrete\", NA, NA, \"unpaved\", NA, NA,…\n$ smoothness <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ width      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ lanes      <chr> NA, NA, NA, NA, \"2\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ oneway     <chr> \"yes\", NA, \"yes\", NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA…\n$ bridge     <chr> NA, NA, NA, NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ layer      <chr> NA, NA, NA, NA, \"1\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ source     <chr> NA, NA, NA, NA, \"Bing\", NA, NA, \"GPS\", NA, NA, NA, NA, NA, …\n$ name_th    <chr> \"ถนนฉลองกรุง\", \"ซอยฉลองกรุง 1/1\", NA, NA, \"ถนนฉลองกรุง\", NA, \"…\n$ osm_id     <dbl> 1125681229, 594401607, 472283206, 594401608, 116847248, 317…\n$ osm_type   <chr> \"ways_line\", \"ways_line\", \"ways_line\", \"ways_line\", \"ways_l…\n$ geometry   <MULTILINESTRING> MULTILINESTRING ((100.7913 ..., MULTILINESTRING…\n```\n\n\n:::\n:::\n\n\nthaiRoadsRaw has a total of 2,792,590 features and 15 fields, with geometry type of multilinestring, and the coordinate system is currently NA.\n\n#### 3.3.2 Thailand - Subnational Administrative Boundaries Data\n\nLikewise, the code chunk below will use the st_read() function of sf package to import the tha_admbndp_admALL_rtsd_itos_20220121 shapefile into R as a simple feature data frame. The output will be saved in rds format for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nadmBndpRaw = st_read(dsn = \"data/geospatial\",\n                     layer = \"tha_admbnda_adm1_rtsd_20220121\") #tha_admbndp_admALL_rtsd_itos_20220121\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\byebhai8\\ISSS626-GeospatialAnalytics\\Take-Home_Ex\\Take-Home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nwrite_rds(admBndpRaw, \"data/rds/admBndpRaw.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the saved admBndpRaw.rds into R environment. Note that there are 2 administrative levels in this data set - ADM0 for country, and ADM1 for province. Hence, we will rename ADM1_EN to province.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmBndpRaw <- read_rds(\"data/rds/admBndpRaw.rds\") %>%\n  rename(province = ADM1_EN)\nglimpse(admBndpRaw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 17\n$ Shape_Leng <dbl> 2.417227, 1.695100, 1.251111, 1.884945, 3.041716, 1.739908,…\n$ Shape_Area <dbl> 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.21393797,…\n$ province   <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"P…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"สมุทรปราการ\", \"นนทบุรี\", \"ปทุมธานี\", \"พระนครศรีอ…\n$ ADM1_PCODE <chr> \"TH10\", \"TH11\", \"TH12\", \"TH13\", \"TH14\", \"TH15\", \"TH16\", \"TH…\n$ ADM1_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((100.6139 13..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\nadmBndpRaw has a total of 77 features and 17 fields, with geometry type of multipolygon, and it is in wgs84 coordinates system.\n\n#### 3.3.3 Thailand Road Accidents Data\n\nSince thai_road_accident_2019_2022.csv data file is in csv file format, we will use the read_csv() of readr package to import this data as shown in the code chunk below. Note that the output will be in a tibble data frame format, and this output will be saved in rds format for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nthaiAccRaw <- read_csv(\"data/aspatial/thai_road_accident_2019_2022.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 81735 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (10): province_th, province_en, agency, route, vehicle_type, presumed_c...\ndbl   (6): acc_code, number_of_vehicles_involved, number_of_fatalities, numb...\ndttm  (2): incident_datetime, report_datetime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nwrite_rds(thaiAccRaw, \"data/rds/thaiAccRaw.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the saved thaiAccRaw.rds into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiAccRaw <- read_rds(\"data/rds/thaiAccRaw.rds\") %>%\n  rename(province = province_en)\nlist(thaiAccRaw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# A tibble: 81,735 × 18\n   acc_code incident_datetime   report_datetime     province_th province  agency\n      <dbl> <dttm>              <dttm>              <chr>       <chr>     <chr> \n 1   571905 2019-01-01 00:00:00 2019-01-02 06:11:00 ลพบุรี        Loburi    depar…\n 2  3790870 2019-01-01 00:03:00 2020-02-20 13:48:00 อุบลราชธานี   Ubon Rat… depar…\n 3   599075 2019-01-01 00:05:00 2019-01-01 10:35:00 ประจวบคีรีขันธ์ Prachuap… depar…\n 4   571924 2019-01-01 00:20:00 2019-01-02 05:12:00 เชียงใหม่     Chiang M… depar…\n 5   599523 2019-01-01 00:25:00 2019-01-04 09:42:00 นครสวรรค์    Nakhon S… depar…\n 6   571982 2019-01-01 00:30:00 2019-01-07 12:46:00 แม่ฮ่องสอน    Mae Hong… depar…\n 7   612782 2019-01-01 00:30:00 2019-10-25 14:25:00 ชุมพร        Chumphon  depar…\n 8   599235 2019-01-01 00:35:00 2019-01-02 16:23:00 สิงห์บุรี       Sing Buri depar…\n 9   600643 2019-01-01 00:40:00 2019-01-11 10:01:00 สงขลา       Songkhla  depar…\n10   599105 2019-01-01 00:45:00 2019-01-01 10:11:00 ตราด        Trat      depar…\n# ℹ 81,725 more rows\n# ℹ 12 more variables: route <chr>, vehicle_type <chr>, presumed_cause <chr>,\n#   accident_type <chr>, number_of_vehicles_involved <dbl>,\n#   number_of_fatalities <dbl>, number_of_injuries <dbl>,\n#   weather_condition <chr>, latitude <dbl>, longitude <dbl>,\n#   road_description <chr>, slope_description <chr>\n```\n\n\n:::\n:::\n\n\nthaiAccRaw has a total of 81,735 features and 18 fields, including the latitude and longitude fields.\n\n## 4. Data Wrangling\n\n### 4.1 Aspatial Data Wrangling\n\n#### 4.1.1 Removing Columns\n\nIt is likely that not all 18 columns are required/useful for our analysis, especially when some of the columns contain values that are not in English (province_th & route). On top of this, there are 2 date columns in the data set - incident_datetime which represents when the accident occurred, and report_datetime which represent when the accident was reported. For the accuracy of our analysis, we only want to focus on when the accident occurred. Hence, we will remove this column as well.\n\nWe will use the select() function from dplyr package to select the variables by index, and exclude the indexes of the columns that we want to remove.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiAccRaw <- thaiAccRaw %>%\n  dplyr::select(1:2, 5:6, 8:18)\nlist(thaiAccRaw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# A tibble: 81,735 × 15\n   acc_code incident_datetime   province      agency vehicle_type presumed_cause\n      <dbl> <dttm>              <chr>         <chr>  <chr>        <chr>         \n 1   571905 2019-01-01 00:00:00 Loburi        depar… motorcycle   driving under…\n 2  3790870 2019-01-01 00:03:00 Ubon Ratchat… depar… private/pas… speeding      \n 3   599075 2019-01-01 00:05:00 Prachuap Khi… depar… motorcycle   speeding      \n 4   571924 2019-01-01 00:20:00 Chiang Mai    depar… motorcycle   driving under…\n 5   599523 2019-01-01 00:25:00 Nakhon Sawan  depar… private/pas… cutting in cl…\n 6   571982 2019-01-01 00:30:00 Mae Hong Son  depar… motorcycle   speeding      \n 7   612782 2019-01-01 00:30:00 Chumphon      depar… 4-wheel pic… failure to yi…\n 8   599235 2019-01-01 00:35:00 Sing Buri     depar… motorcycle   speeding      \n 9   600643 2019-01-01 00:40:00 Songkhla      depar… motorcycle   speeding      \n10   599105 2019-01-01 00:45:00 Trat          depar… motorcycle   speeding      \n# ℹ 81,725 more rows\n# ℹ 9 more variables: accident_type <chr>, number_of_vehicles_involved <dbl>,\n#   number_of_fatalities <dbl>, number_of_injuries <dbl>,\n#   weather_condition <chr>, latitude <dbl>, longitude <dbl>,\n#   road_description <chr>, slope_description <chr>\n```\n\n\n:::\n:::\n\n\nThe output confirms that we have dropped 3 columns.\n\n#### 4.1.2 Adding Columns\n\nWe also want to add new columns which could potentially help with our analysis later on, namely Season, Day of Week and Time of Day. Reference was taken from the following link to determine the Seasons for BMR.\n\nLink: <https://www.thomascook.in/international-tourism/best-time-to-visit-bangkok#:~:text=The%20weather%20in%20Bangkok%20is,best%20time%20to%20visit%20Bangkok>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiAccRaw <- thaiAccRaw %>%\n  mutate(\n    dayofweek = wday(incident_datetime, label = TRUE, abbr = TRUE),\n    month = month(incident_datetime, label = TRUE, abbr = TRUE),\n    season = case_when(\n      month(incident_datetime) %in% c(1:2, 11:12) ~ \"Winter\", \n      month(incident_datetime)  %in% 3:6 ~ \"Summer\", \n      month(incident_datetime)  %in% 7:10 ~ \"Rainy\"))\nlist(thaiAccRaw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# A tibble: 81,735 × 18\n   acc_code incident_datetime   province      agency vehicle_type presumed_cause\n      <dbl> <dttm>              <chr>         <chr>  <chr>        <chr>         \n 1   571905 2019-01-01 00:00:00 Loburi        depar… motorcycle   driving under…\n 2  3790870 2019-01-01 00:03:00 Ubon Ratchat… depar… private/pas… speeding      \n 3   599075 2019-01-01 00:05:00 Prachuap Khi… depar… motorcycle   speeding      \n 4   571924 2019-01-01 00:20:00 Chiang Mai    depar… motorcycle   driving under…\n 5   599523 2019-01-01 00:25:00 Nakhon Sawan  depar… private/pas… cutting in cl…\n 6   571982 2019-01-01 00:30:00 Mae Hong Son  depar… motorcycle   speeding      \n 7   612782 2019-01-01 00:30:00 Chumphon      depar… 4-wheel pic… failure to yi…\n 8   599235 2019-01-01 00:35:00 Sing Buri     depar… motorcycle   speeding      \n 9   600643 2019-01-01 00:40:00 Songkhla      depar… motorcycle   speeding      \n10   599105 2019-01-01 00:45:00 Trat          depar… motorcycle   speeding      \n# ℹ 81,725 more rows\n# ℹ 12 more variables: accident_type <chr>, number_of_vehicles_involved <dbl>,\n#   number_of_fatalities <dbl>, number_of_injuries <dbl>,\n#   weather_condition <chr>, latitude <dbl>, longitude <dbl>,\n#   road_description <chr>, slope_description <chr>, dayofweek <ord>,\n#   month <ord>, season <chr>\n```\n\n\n:::\n:::\n\n\nThe output confirms that we have added 3 new columns.\n\n#### 4.1.3 Filter by Province\n\nNote that thaiAccRaw has a total of 81,735 rows. We want to only focus on the study area (BMR) in our analysis. Hence, we will filter the province field to focus on the 6 provinces which are in the BMR: Bangkok, Nakhon Pathom, Pathum Thani, Nonthaburi, Samut Prakan and Samut Sakhon. \n\nWe will store these province names in a list and use it in our filter condition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr <- c(\"Nakhon Pathom\", \"Pathum Thani\", \"Nonthaburi\", \"Samut Prakan\", \"Samut Sakhon\", \"Bangkok\")\nthaiAccRaw <- thaiAccRaw %>%\n  filter(province %in% bmr)\nlist(thaiAccRaw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# A tibble: 13,336 × 18\n   acc_code incident_datetime   province      agency vehicle_type presumed_cause\n      <dbl> <dttm>              <chr>         <chr>  <chr>        <chr>         \n 1   571882 2019-01-01 02:25:00 Nakhon Pathom depar… motorcycle   speeding      \n 2   600001 2019-01-01 03:00:00 Nonthaburi    depar… private/pas… speeding      \n 3   605043 2019-01-01 03:00:00 Samut Prakan  depar… private/pas… running red l…\n 4   629691 2019-01-01 03:05:00 Bangkok       expre… other        other         \n 5   571887 2019-01-01 04:30:00 Nakhon Pathom depar… motorcycle   speeding      \n 6   599234 2019-01-01 04:45:00 Samut Prakan  depar… motorcycle   driving under…\n 7   599990 2019-01-01 05:30:00 Samut Sakhon  depar… motorcycle   speeding      \n 8   612045 2019-01-01 05:30:00 Nonthaburi    depar… private/pas… cutting in cl…\n 9   629689 2019-01-01 05:42:00 Bangkok       expre… other        other         \n10   607046 2019-01-01 06:30:00 Pathum Thani  depar… private/pas… speeding      \n# ℹ 13,326 more rows\n# ℹ 12 more variables: accident_type <chr>, number_of_vehicles_involved <dbl>,\n#   number_of_fatalities <dbl>, number_of_injuries <dbl>,\n#   weather_condition <chr>, latitude <dbl>, longitude <dbl>,\n#   road_description <chr>, slope_description <chr>, dayofweek <ord>,\n#   month <ord>, season <chr>\n```\n\n\n:::\n:::\n\n\nNote that after the filter is applied, thaiAccRaw has been reduced to having only 13,336 rows.\n\n#### 4.1.4 Handling Missing Values\n\nMoving forward, we will be utilizing two useful columns - latitude and longitude. Note that they are in decimal degree format. \n\nThe filter() function of dplyr package can be used to verify if these key columns have any missing values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiAccRaw %>%\n  filter(is.na(longitude) | longitude == \"\",\n         is.na(latitude)  | latitude == \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 350 × 18\n   acc_code incident_datetime   province agency      vehicle_type presumed_cause\n      <dbl> <dttm>              <chr>    <chr>       <chr>        <chr>         \n 1  5099638 2021-01-01 21:33:00 Bangkok  expressway… other        other         \n 2  5099647 2021-01-10 14:26:00 Bangkok  expressway… other        other         \n 3  3014701 2021-01-14 22:15:00 Bangkok  expressway… other        other         \n 4  5099676 2021-01-26 02:00:00 Bangkok  expressway… other        other         \n 5  5099678 2021-01-26 13:50:00 Bangkok  expressway… other        other         \n 6  5099677 2021-01-26 17:39:00 Bangkok  expressway… other        other         \n 7  5099691 2021-02-02 11:07:00 Bangkok  expressway… other        other         \n 8  5099698 2021-02-03 21:47:00 Bangkok  expressway… other        other         \n 9  5099703 2021-02-05 09:32:00 Bangkok  expressway… other        other         \n10  5099716 2021-02-09 13:04:00 Bangkok  expressway… other        other         \n# ℹ 340 more rows\n# ℹ 12 more variables: accident_type <chr>, number_of_vehicles_involved <dbl>,\n#   number_of_fatalities <dbl>, number_of_injuries <dbl>,\n#   weather_condition <chr>, latitude <dbl>, longitude <dbl>,\n#   road_description <chr>, slope_description <chr>, dayofweek <ord>,\n#   month <ord>, season <chr>\n```\n\n\n:::\n:::\n\n\nThe output proves that there are 350 rows which contain missing values for the latitude and longitude columns. To handle this issue, we will re-use the filter() function to exclude these missing values from our tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiAccRaw <- thaiAccRaw %>%\n  filter(!is.na(longitude) | longitude != \"\",\n         !is.na(latitude)  | latitude != \"\")\n```\n:::\n\n\nLet us verify if the rows with missing values have been dropped by re-running our initial code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiAccRaw %>%\n  filter(is.na(longitude) | longitude == \"\",\n         is.na(latitude)  | latitude == \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 18\n# ℹ 18 variables: acc_code <dbl>, incident_datetime <dttm>, province <chr>,\n#   agency <chr>, vehicle_type <chr>, presumed_cause <chr>,\n#   accident_type <chr>, number_of_vehicles_involved <dbl>,\n#   number_of_fatalities <dbl>, number_of_injuries <dbl>,\n#   weather_condition <chr>, latitude <dbl>, longitude <dbl>,\n#   road_description <chr>, slope_description <chr>, dayofweek <ord>,\n#   month <ord>, season <chr>\n```\n\n\n:::\n:::\n\n\nThe message above confirms that the rows with missing values have been excluded from thaiAccRaw.\n\n#### 4.1.5 Handling Duplicates\n\nWe also want to avoid the repetition of records, which could lead to incorrect analysis of accidents in thaiAccRaw. Hence, we will check for duplicates using group_by_all() to ensure the integrity of our data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicates <- thaiAccRaw %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  ungroup()\nduplicates\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 18\n# ℹ 18 variables: acc_code <dbl>, incident_datetime <dttm>, province <chr>,\n#   agency <chr>, vehicle_type <chr>, presumed_cause <chr>,\n#   accident_type <chr>, number_of_vehicles_involved <dbl>,\n#   number_of_fatalities <dbl>, number_of_injuries <dbl>,\n#   weather_condition <chr>, latitude <dbl>, longitude <dbl>,\n#   road_description <chr>, slope_description <chr>, dayofweek <ord>,\n#   month <ord>, season <chr>\n```\n\n\n:::\n:::\n\n\nThe message above confirms that there are no duplicated records in thaiAccRaw, which is great!\n\n#### 4.1.6 Creating Simple Feature Data Frame\n\nNext, the code chunk below helps to convert thaiAccRaw into a simple feature data frame by using st_as_sf() of sf packages.\n\nAs mentioned previously, the projected coordinate system of Thailand is WGS84/UTM zone 47N, and the EPSG code is 32647. Hence, we will set the following arguments accordingly:\n-   coords argument to specify the column names to use for x- and y-coordinates\n-   crs argument to specify the coordinates system in epsg format, EPSG:4326 for wgs84 and EPSG:32647 for Thailand's projected coordinate system\n\nThe output will be saved in rds format for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nthaiAccSF <- st_as_sf(thaiAccRaw, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 32647)\nwrite_rds(thaiAccSF, \"data/rds/thaiAccSF.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the saved thaiAccSF.rds into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiAccSF <- read_rds(\"data/rds/thaiAccSF.rds\")\nglimpse(thaiAccSF)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 12,986\nColumns: 17\n$ acc_code                    <dbl> 571882, 600001, 605043, 629691, 571887, 59…\n$ incident_datetime           <dttm> 2019-01-01 02:25:00, 2019-01-01 03:00:00,…\n$ province                    <chr> \"Nakhon Pathom\", \"Nonthaburi\", \"Samut Prak…\n$ agency                      <chr> \"department of rural roads\", \"department o…\n$ vehicle_type                <chr> \"motorcycle\", \"private/passenger car\", \"pr…\n$ presumed_cause              <chr> \"speeding\", \"speeding\", \"running red light…\n$ accident_type               <chr> \"rollover/fallen on straight road\", \"rollo…\n$ number_of_vehicles_involved <dbl> 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 2, …\n$ number_of_fatalities        <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, …\n$ number_of_injuries          <dbl> 2, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, …\n$ weather_condition           <chr> \"clear\", \"clear\", \"clear\", \"clear\", \"clear…\n$ road_description            <chr> \"straight road\", \"straight road\", \"other\",…\n$ slope_description           <chr> \"no slope\", \"no slope\", \"other\", \"other\", …\n$ dayofweek                   <ord> Tue, Tue, Tue, Tue, Tue, Tue, Tue, Tue, Tu…\n$ month                       <ord> Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Ja…\n$ season                      <chr> \"Winter\", \"Winter\", \"Winter\", \"Winter\", \"W…\n$ geometry                    <POINT [m]> POINT (627012.3 1533381), POINT (655…\n```\n\n\n:::\n:::\n\n\nNote that a new column called geometry has been added into the data frame. Also, the columns longitude and latitude have been dropped from the data frame.\n\n### 4.2 Geospatial Data Wrangling\n\n#### 4.2.1 Removing Columns\n\nFor thaiRoadsRaw data frame, we will be removing columns which do not contain values in English. We will also be removing columns which might not be helpful for our analysis - source, osm_id & osm_type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiRoadsRaw <- thaiRoadsRaw %>%\n  dplyr::select(2:10, 15)\nglimpse(thaiRoadsRaw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,792,590\nColumns: 10\n$ road       <chr> \"Chalong Krung Road\", \"Soi Chalong Krung 1/1\", NA, NA, \"Cha…\n$ highway    <chr> \"secondary\", \"residential\", \"secondary_link\", \"service\", \"s…\n$ surface    <chr> \"paved\", NA, NA, NA, \"concrete\", NA, NA, \"unpaved\", NA, NA,…\n$ smoothness <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ width      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ lanes      <chr> NA, NA, NA, NA, \"2\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ oneway     <chr> \"yes\", NA, \"yes\", NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA…\n$ bridge     <chr> NA, NA, NA, NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ layer      <chr> NA, NA, NA, NA, \"1\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ geometry   <MULTILINESTRING> MULTILINESTRING ((100.7913 ..., MULTILINESTRING…\n```\n\n\n:::\n:::\n\n\nthaiRoadsRaw now only consists of 10 columns, reduced from the original 15 columns.\n\nLikewise, for the admBndpRaw data frame, we will be removing columns which do not contain values in English. We will also be removing columns which might not be helpful for our analysis, keeping only the key variables (province, which is ADM1_EN & geometry) we want to use for our analysis. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmBndpRaw <- admBndpRaw %>%\n  dplyr::select(1:3, 17)\nglimpse(admBndpRaw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 4\n$ Shape_Leng <dbl> 2.417227, 1.695100, 1.251111, 1.884945, 3.041716, 1.739908,…\n$ Shape_Area <dbl> 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.21393797,…\n$ province   <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"P…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((100.6139 13..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\nadmBndpRaw now only consists of 4 columns, reduced from the original 17 columns.\n\n#### 4.2.2 Filter by Province\n\nWe want to only focus on the study area (BMR) in our analysis. Hence, we will filter the province field to focus on the 6 provinces which are in the BMR: Bangkok, Nakhon Pathom, Pathum Thani, Nonthaburi, Samut Prakan and Samut Sakhon. \n\nWe will store these province names in a list and use it in our filter condition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr <- c(\"Nakhon Pathom\", \"Pathum Thani\", \"Nonthaburi\", \"Samut Prakan\", \"Samut Sakhon\", \"Bangkok\")\nadmBndpRaw <- admBndpRaw %>%\n  filter(province %in% bmr)\nglimpse(admBndpRaw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 6\nColumns: 4\n$ Shape_Leng <dbl> 2.417227, 1.695100, 1.251111, 1.884945, 2.463030, 1.566369\n$ Shape_Area <dbl> 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.17891420,…\n$ province   <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"N…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((100.6139 13..., MULTIPOLYGON (((100.7306 13…\n```\n\n\n:::\n:::\n\n\nNote that after the filter is applied, admBndpRaw has been reduced to having only 6 rows, compared to the original 77 rows. Each of these 6 rows now represent each of the province in Bangkok Metropolitan Region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nqtm(admBndpRaw, fill = \"province\") +\n  tm_legend(main.title = \"Bangkok Metropolitan Region\", legend.position = c(\"left\", \"top\"), legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex1D_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n#### 4.2.3 Filter by Highway\n\nTaking reference from the below link, we will filter the highway field of thaiRoadsRaw to focus on the 5 key highway variables: motorway, primary, secondary, tertiary and unclassified. \n\nLink: <https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Highway_classification>\n\nWe will store these highway values in a list and use it in our filter condition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhighways <- c(\"motorway\", \"primary\", \"secondary\", \"tertiary\", \"unclassified\")\nthaiRoadsRaw <- thaiRoadsRaw %>%\n  filter(highway %in% highways)\nglimpse(thaiRoadsRaw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 188,596\nColumns: 10\n$ road       <chr> \"Chalong Krung Road\", \"Chalong Krung Road\", \"Erawan 1 Road\"…\n$ highway    <chr> \"secondary\", \"secondary\", \"tertiary\", \"tertiary\", \"unclassi…\n$ surface    <chr> \"paved\", \"concrete\", NA, NA, \"gravel\", \"gravel\", \"gravel\", …\n$ smoothness <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ width      <chr> NA, NA, NA, NA, NA, NA, \"4\", NA, NA, NA, NA, NA, NA, NA, NA…\n$ lanes      <chr> NA, \"2\", NA, NA, \"1\", \"1\", \"1\", \"3\", NA, NA, NA, NA, NA, \"1…\n$ oneway     <chr> \"yes\", \"yes\", NA, NA, NA, NA, NA, \"yes\", \"yes\", \"yes\", NA, …\n$ bridge     <chr> NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"yes…\n$ layer      <chr> NA, \"1\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"1\", N…\n$ geometry   <MULTILINESTRING> MULTILINESTRING ((100.7913 ..., MULTILINESTRING…\n```\n\n\n:::\n:::\n\n\nNote that after the filter is applied, thaiRoadsRaw has been reduced to having only 188,596 rows, compared to the original 2,792,590 rows.\n\n#### 4.2.4 Handling Multilinestring\n\nFor our spatio-temporal analysis, we require the geometry field in thaiRoadsRaw to be of LINESTRING instead of MULTILINESTRING. \n\nTo do this, we will utilize the st_cast() function from sf package to convert geometry field from MULTILINESTRING to LINESTRING.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiRoadsRaw$geometry <- st_cast(thaiRoadsRaw$geometry, \"LINESTRING\")\nglimpse(thaiRoadsRaw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 188,596\nColumns: 10\n$ road       <chr> \"Chalong Krung Road\", \"Chalong Krung Road\", \"Erawan 1 Road\"…\n$ highway    <chr> \"secondary\", \"secondary\", \"tertiary\", \"tertiary\", \"unclassi…\n$ surface    <chr> \"paved\", \"concrete\", NA, NA, \"gravel\", \"gravel\", \"gravel\", …\n$ smoothness <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ width      <chr> NA, NA, NA, NA, NA, NA, \"4\", NA, NA, NA, NA, NA, NA, NA, NA…\n$ lanes      <chr> NA, \"2\", NA, NA, \"1\", \"1\", \"1\", \"3\", NA, NA, NA, NA, NA, \"1…\n$ oneway     <chr> \"yes\", \"yes\", NA, NA, NA, NA, NA, \"yes\", \"yes\", \"yes\", NA, …\n$ bridge     <chr> NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"yes…\n$ layer      <chr> NA, \"1\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"1\", N…\n$ geometry   <LINESTRING> LINESTRING (100.7913 13.740..., LINESTRING (100.7831…\n```\n\n\n:::\n:::\n\n\nNote that the geometry field in thaiRoadsRaw has been updated to LINESTRING now.\n\n#### 4.2.5 Coordinate Systems\n\nAs mentioned previously, the projected coordinate system of Thailand is WGS84/UTM zone 47N, and the EPSG code is 32647.\n\nWe can use st_crs() of sf package to identify the coordinate system of thaiRoadsRaw.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thaiRoadsRaw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System: NA\n```\n\n\n:::\n:::\n\n\nThe message above shows that there is no assignment of coordinate system for thaiRoadsRaw simple feature data frame. Hence, we will use the below code chunk to assign the CRS first before transforming the CRS to EPSG 32647.\n\nThe output will be saved in rds format for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nthaiRoadsRaw <- st_set_crs(thaiRoadsRaw, 4326)\nthaiRoadsSF <- st_transform(thaiRoadsRaw, crs = 32647)\nwrite_rds(thaiRoadsSF, \"data/rds/thaiRoadsSF.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the saved thaiRoadsSF.rds into R environment. Let us display the content of thaiRoadsSF to verify the updated CRS info.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiRoadsSF <- read_rds(\"data/rds/thaiRoadsSF.rds\")\nst_crs(thaiRoadsSF)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\nLikewise, we can use st_crs() of sf package to identify the coordinate system of admBndpRaw.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(admBndpRaw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\nAs the admBndpRaw simple feature data frame is in wgs84 coordinate system, we will perform projection transformation using the code chunk below.\n\nThe output will be saved in rds format for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nadmBndpRaw <- st_set_crs(admBndpRaw, 4326)\nadmBndpSF <- st_transform(admBndpRaw, crs = 32647)\nwrite_rds(admBndpSF, \"data/rds/admBndpSF.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the saved admBndpSF.rds into R environment. Let us display the content of admBndpSF to verify the updated CRS info.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmBndpSF <- read_rds(\"data/rds/admBndpSF.rds\")\nst_crs(admBndpSF)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\nLastly, we can use st_crs() of sf package to identify the coordinate system of thaiAccSF.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thaiAccSF)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\nWe have now verified that all our sf data frames contain the correct CRS information.\n\n#### 4.2.6 Intersection of Data\n\nOur thaiRoadsSF data could contain information on roads which are out of the admin boundaries of the 6 provinces that we want to focus on. Hence, we will clip the data by performing an intersection of thaiRoadsSF with admBndpSF data using the code chunk below.\n\nThe output will be saved in rds format for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nthaiRoadsBndSF <- st_intersection(thaiRoadsSF, admBndpSF)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n```{.r .cell-code}\nwrite_rds(thaiRoadsBndSF, \"data/rds/thaiRoadsBndSF.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the saved thaiRoadsBndSF.rds into R environment. We can use st_geometry() to visualize the intersection of data to ensure it worked correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiRoadsBndSF <- read_rds(\"data/rds/thaiRoadsBndSF.rds\")\nplot(st_geometry(thaiRoadsBndSF))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex1D_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nWe can now proceed to tackle the objectives of this exercise.\n\n## 5. Visualizing Spatio-Temporal Dynamics of Accidents\n\nThe code chunk below helps us identify that out of the 6 provinces in BMR, Bangkok has the most number of accidents.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiAccSF %>%\n  group_by(province) %>%\n  summarise(numAccidents = n()) %>%\n  ggplot(aes(x = province, y = numAccidents, fill = province)) +\n    geom_bar(stat = \"identity\") +\n    theme_classic() +\n    labs(x = \"Province\", y = \"Number of Accidents\", title = \"Number of Accidents by Province\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex1D_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below helps us identify that most of the accidents occurred when there were no slopes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiAccSF %>%\n  group_by(slope_description) %>%\n  summarise(numAccidents = n()) %>%\n  ggplot(aes(x = slope_description, y = numAccidents, fill = slope_description)) +\n    geom_bar(stat = \"identity\") +\n    theme_classic() +\n    labs(x = \"Slope Description\", y = \"Number of Accidents\", title = \"Number of Accidents by Slope Description\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex1D_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below helps us identify that December was the month with the highest number of accidents.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiAccSF %>%\n  group_by(month) %>%\n  summarise(numAccidents = n()) %>%\n  ggplot(aes(x = month, y = numAccidents, fill = month)) +\n    geom_bar(stat = \"identity\") +\n    theme_classic() +\n    labs(x = \"Month\", y = \"Number of Accidents\", title = \"Number of Accidents by Month\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex1D_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below helps us identify that more accidents occur on both Friday and Saturday.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiAccSF %>%\n  group_by(dayofweek) %>%\n  summarise(numAccidents = n()) %>%\n  ggplot(aes(x = dayofweek, y = numAccidents, fill = dayofweek)) +\n    geom_bar(stat = \"identity\") +\n    theme_classic() +\n    labs(x = \"Day of Week\", y = \"Number of Accidents\", title = \"Number of Accidents by Day of Week\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex1D_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below helps us identify that the number of accidents occurring each season are around the same.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiAccSF %>%\n  group_by(season) %>%\n  summarise(numAccidents = n()) %>%\n  ggplot(aes(x = season, y = numAccidents, fill = season)) +\n    geom_bar(stat = \"identity\") +\n    theme_classic() +\n    labs(x = \"Season\", y = \"Number of Accidents\", title = \"Number of Accidents by Season\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex1D_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\nWe can also plot a heatmap to show the intensity of accidents over different days and times.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaiAccSF$hour <- format(thaiAccSF$incident_datetime, \"%H\")\nthaiAccSF %>%\n  group_by(dayofweek, hour) %>%\n  summarise(numAccidents = n()) %>%\n  ggplot(aes(x = hour, y = dayofweek, fill = numAccidents)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"lightyellow\", high = \"red\") +\n    labs(title = \"Accident Density by Hour and Day of Week\", x = \"Hour of Day\", y = \"Day of Week\") +\n    theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'dayofweek'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex1D_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\nLet's set the tmap_mode to plotting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tmap_mode(\"view\")\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n\nWe will create a map to show the location of accidents, with the admin boundaries and roads for context. We will be overlaying the thaiAccSF data as points on this map as dots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admBndpSF) + \n  tm_polygons(col = \"lightgray\", alpha = 0.3) +\n  tm_shape(thaiAccSF) + \n  tm_dots(col = \"province\", size = 0.02) +\n  tm_layout(title = \"Accident Locations in Bangkok Metropolitan Region\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex1D_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\nNext, we can break down the accident data over time using facets. This will help us analyse the accidents over time across the 6 provinces in BMR.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admBndpSF) + \n  tm_polygons(col = \"lightgray\", alpha = 0.3) + \n  tm_shape(thaiAccSF) + \n  tm_dots(col = \"month\", size = 0.02) + \n  tm_facets(by = \"province\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex1D_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\nLikewise, we can break down the accident data over day of week using facets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admBndpSF) + \n  tm_polygons(col = \"lightgray\", alpha = 0.3) + \n  tm_shape(thaiAccSF) + \n  tm_dots(col = \"dayofweek\", size = 0.02) + \n  tm_facets(by = \"province\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex1D_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\nNext, we can break down the accident data over seasons using facets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admBndpSF) + \n  tm_polygons(col = \"lightgray\", alpha = 0.3) + \n  tm_shape(thaiAccSF) + \n  tm_dots(col = \"season\", size = 0.02) + \n  tm_facets(by = \"province\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex1D_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\n## 6. Spatial Analysis using Network Spatial Point Patterns Analysis\n\nWe will first use as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp's Spatial class.\n\nThe output will be saved in rds format for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nroads <- as_Spatial(thaiRoadsBndSF)\nboundary <- as_Spatial(admBndpSF)\naccidents <- as_Spatial(thaiAccSF)\nwrite_rds(roads, \"data/rds/roads.rds\")\nwrite_rds(boundary, \"data/rds/boundary.rds\")\nwrite_rds(accidents, \"data/rds/accidents.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the saved rds into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroads <- read_rds(\"data/rds/roads.rds\")\nboundary <- read_rds(\"data/rds/boundary.rds\")\naccidents <- read_rds(\"data/rds/accidents.rds\")\n```\n:::\n\n\nWe will use the list() function to display the information of these spatial classes as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(roads)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\nclass       : SpatialLinesDataFrame \nfeatures    : 24783 \nextent      : 590124.8, 712235, 1484506, 1579041  (xmin, xmax, ymin, ymax)\ncrs         : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nvariables   : 12\nnames       :            road,      highway, surface,   smoothness, width, lanes, oneway,  bridge, layer,    Shape_Leng,      Shape_Area,     province \nmin values  : 25 Mokkara Road,     motorway, asphalt,          bad,    10,     0,     -1, movable,    -1, 1.25111117749, 0.0532376597241,      Bangkok \nmax values  :     Yuwittaya 7, unclassified,    wood, intermediate,     9,     9,    yes,     yes,     4, 2.46303035967,  0.178914199749, Samut Sakhon \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(boundary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\nclass       : SpatialPolygonsDataFrame \nfeatures    : 6 \nextent      : 587893.5, 712440.5, 1484414, 1579076  (xmin, xmax, ymin, ymax)\ncrs         : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nvariables   : 3\nnames       :    Shape_Leng,      Shape_Area,     province \nmin values  : 1.25111117749, 0.0532376597241,      Bangkok \nmax values  : 2.46303035967,  0.178914199749, Samut Sakhon \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(accidents)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\nclass       : SpatialPointsDataFrame \nfeatures    : 12986 \nextent      : 591277.5, 710166.1, 1486846, 1576520  (xmin, xmax, ymin, ymax)\ncrs         : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nvariables   : 17\nnames       : acc_code, incident_datetime,     province,                           agency,         vehicle_type,        presumed_cause,                    accident_type, number_of_vehicles_involved, number_of_fatalities, number_of_injuries, weather_condition,           road_description, slope_description, dayofweek, month, ... \nmin values  :   571882,        1546309500,      Bangkok,           department of highways, 4-wheel pickup truck,    abrupt lane change, collision at intersection corner,                           0,                    0,                  0,             clear, connecting to private area,          no slope,       Fri,   Apr, ... \nmax values  :  7570954,        1672528260, Samut Sakhon, expressway authority of thailand,                  van, worn-out/tire blowout,     turning/retreating collision,                          12,                   13,                 51,             rainy,             y-intersection,        slope area,       Wed,   Sep, ... \n```\n\n\n:::\n:::\n\n\nspatstat requires the data in ppp object form. Before that, we will convert these spatial classes into generic sp format first.\n\nThe output will be saved in rds format for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\naccidentsSP <- as(accidents, \"SpatialPoints\")\nboundarySP <- as(boundary, \"SpatialPolygons\")\nwrite_rds(accidentsSP, \"data/rds/accidentsSP.rds\")\nwrite_rds(boundarySP, \"data/rds/boundarySP.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the saved rds into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidentsSP <- read_rds(\"data/rds/accidentsSP.rds\")\nboundarySP <- read_rds(\"data/rds/boundarySP.rds\")\n```\n:::\n\n\nLikewise, will use the list() function to display the information of these spatial objects as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(accidentsSP)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\nclass       : SpatialPoints \nfeatures    : 12986 \nextent      : 591277.5, 710166.1, 1486846, 1576520  (xmin, xmax, ymin, ymax)\ncrs         : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(boundarySP)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\nclass       : SpatialPolygons \nfeatures    : 6 \nextent      : 587893.5, 712440.5, 1484414, 1579076  (xmin, xmax, ymin, ymax)\ncrs         : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \n```\n\n\n:::\n:::\n\n\nNow, we will use the as.ppp() function of spatstat to convert the spatial data into spatstat's ppp object format.\n\nThe output will be saved in rds format for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# facing issues with installing/loading spatstat & spatstat.data\n# accidentsPPP <- spatstat::as.ppp(accidentsSP)\n# write_rds(accidentsPPP, \"data/rds/accidentsPPP.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the saved rds into R environment.\n\n::: {.cell}\n\n```{.r .cell-code}\n# accidentsPPP <- read_rds(\"data/rds/accidentsPPP.rds\")\n```\n:::\n\n\n\n## 7. Spatio-Temporal Analysis using Temporal Network Spatial Point Patterns Analysis\n\nWe will be performing network kernel density estimation by using the appropriate functions provided in spNetwork package. \n\nBefore computing NKDE, we need to cut the linestring object into lixels with a specified minimal distance. We will be using lixelize_lines() of spNetwork package for this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\n#thaiRoadsBndSF$geometry <- st_cast(thaiRoadsBndSF$geometry, \"LINESTRING\")\n#lixels <- lixelize_lines(thaiRoadsBndSF, 700, mindist = 375)\n```\n:::\n\n\nThen, we will use lines_center() of spNetwork package to generate a SpatialPointsDataFrame with line centre points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\n#samples <- lines_center(lixels)\n```\n:::\n\n\nThis would mean that the points are located at center of the lines based on the length of the line.\n\nWe can now compute NKDE by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\n#densities <- nkde(thaiRoadsBndSF, \n#                  events = thaiAccSF,\n#                  w = rep(1, nrow(thaiAccSF)),\n#                  samples = samples,\n#                  kernel_name = \"quartic\",\n#                  bw = 300, \n#                  div= \"bw\", \n#                  method = \"simple\", \n#                  digits = 1, \n#                  tol = 1,\n#                  grid_shape = c(1,1), \n#                  max_depth = 8,\n#                  agg = 5, \n#                  sparse = TRUE,\n#                  verbose = FALSE)\n```\n:::\n\n\nBefore we visualize NKDE values, we will use the code chunk below to insert the computed density values into samples, and the lixels objects as density.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\n#samples$density <- densities\n#lixels$density <- densities\n```\n:::\n\n\nWe can now prepare the following map visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\n#tmap_mode('plot')\n#tm_shape(lixels)+\n#  tm_lines(col=\"density\")+\n#tm_shape(thaiAccSF)+\n#  tm_dots()\n```\n:::\n\n\nxx...\n",
    "supporting": [
      "Take-Home_Ex1D_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}