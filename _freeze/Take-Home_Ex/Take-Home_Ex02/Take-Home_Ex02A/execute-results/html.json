{
  "hash": "1e4a32ef9b4aa5b2df4d9a5b37373ec1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 02\"\nauthor: \"Bhairavi Vairavelu\"\ndate: \"Sep 30 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# Discovering Impacts of COVID-19 on Thailand Tourism Economy using Spatial & Spatio-Temporal Statistics\n\n## 1.0 Overview\n\nTourism is one of Thailand’s largest industries, accounting for some 20% of the gross domestic product (GDP). In 2019, Thailand earned 90 billion US\\$ from domestic and international tourism, but the COVID-19 pandemic caused revenues to crash to 24 billion US\\$ in 2020.\n\nThe revenue from tourism industry have been recovered gradually since September 2021. However, it is important to note that the tourism economy of Thailand are not evenly distributed. Note that the tourism economy of Thailand are mainly focused on five provinces, namely Bangkok, Phuket, Chon Buri, Krabi and Chiang Mai.\n\n### 1.1 Objectives\n\nThrough this exercise, we are interested to discover the following:\n\n-   If the key indicators of tourism economy of Thailand are independent from space and space and time\n\n-   If the tourism economy is indeed spatial and spatio-temporal dependent\n\n    -   If so, we would like to detect where are the clusters and outliers, and the emerging hot spot/cold spot areas\n\n### 1.2 The Task\n\nWe will be performing the following tasks in this exercise:\n\n-   Preparation of the following Geospatial data layer:\n\n    -   Study area layer in sf polygon features (at province level incl. Bangkok)\n\n    -   Tourism economy indicators layer within the study area in sf polygon features\n\n    -   Derived tourism economy indicator layer in spacetime s3 class of sfdep, with time series kept at month and year levels\n\n-   Perform Global Spatial Autocorrelation Analysis using sfdep methods\n\n-   Perform Local Spatial Autocorrelation Analysis using sfdep methods\n\n-   Perform Emerging Hot/Cold Spot Analysis using sfdep methods\n\n### 1.3 Analytical Tools\n\nThe following R packages will be used for this exercise:\n\n-   **sf**, which is used for importing and handling geospatial data in R\n\n-   **sfdep**, which is used for spatial dependence with spatial features\n\n-   **tmap**, which is used to prepare cartographic quality choropleth maps\n\n-   **plotly**, for creating interactive graphs\n\n-   **tidyverse**, which is mainly for wrangling attribute data in R\n\n-   **lubridate**, which is used to parse and manipulate dates\n\n-   **Kendall**, which helps compute the Kendall rank correlation and Mann-Kendall trend test\n\nThe code chunk below uses p_load() of pacman package to check if the necessary packages have been installed in R. If yes, we will load the packages on R environment as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, plotly, tidyverse, lubridate, Kendall)\n```\n:::\n\n\n## 2.0 Data\n\n### 2.1 Getting the Data\n\nFor this exercise, we will be using two datasets:\n\n-   Thailand Domestic Tourism Statistics from Kaggle (Version 2)\n\n![](data01.png){fig-align=\"center\"}\n\n-   Thailand - Subnational Administrative Boundaries from HDX\n\n![](data02.png){fig-align=\"center\"}\n\n### 2.2 Importing the Data\n\nThese are the files we have for Thailand Domestic Tourism Statistics:\n\n![](data01_files.png){fig-align=\"center\"}\n\nNote that we will only use Version 2 of the dataset.\n\nThe code chunk below is used to load the ver2 data into our R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\ntourism <- read_csv(\"data/aspatial/thailand_domestic_tourism_2019_2023_ver2.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 30800 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): province_thai, province_eng, region_thai, region_eng, variable\ndbl  (1): value\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nwrite_rds(tourism, \"data/rds/tourism.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the saved tourism.rds into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- read_rds(\"data/rds/tourism.rds\")\n```\n:::\n\n\nThese are the files we have for Thailand - Subnational Administrative Boundaries:\n\n![](data02_files.png){fig-align=\"center\"}\n\nRecall that this HDX data source contains information on 4 administrative levels - 0 for Country, 1 for Province, 2 for District and 3 for Sub-District. Hence, there were numerous files downloaded from this data source. However, we only want to focus on Province-level analysis for this exercises. As such, we will only load the ADM1 data into our R environment.\n\nThe code chunk below is used to load the ver2 data into our R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nboundaries = st_read(dsn = \"data/geospatial\",\n                     layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\byebhai8\\ISSS626-GeospatialAnalytics\\Take-Home_Ex\\Take-Home_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nwrite_rds(boundaries, \"data/rds/boundaries.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the saved boundaries.rds into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboundaries <- read_rds(\"data/rds/boundaries.rds\")\n```\n:::\n\n\n## 3.0 Data Wrangling\n\n### 3.1 Tourism Data\n\nLet's take a quick look at the newly imported tourism data by using the glimpse() function of dplyr package as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(tourism)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 30,800\nColumns: 7\n$ date          <date> 2019-01-01, 2019-01-01, 2019-01-01, 2019-01-01, 2019-01…\n$ province_thai <chr> \"กรุงเทพมหานคร\", \"ลพบุรี\", \"พระนครศรีอยุธยา\", \"สระบุรี\", \"ชัยนาท…\n$ province_eng  <chr> \"Bangkok\", \"Lopburi\", \"Phra Nakhon Si Ayutthaya\", \"Sarab…\n$ region_thai   <chr> \"ภาคกลาง\", \"ภาคกลาง\", \"ภาคกลาง\", \"ภาคกลาง\", \"ภาคกลาง\", \"…\n$ region_eng    <chr> \"central\", \"central\", \"central\", \"central\", \"central\", \"…\n$ variable      <chr> \"ratio_tourist_stay\", \"ratio_tourist_stay\", \"ratio_touri…\n$ value         <dbl> 93.37, 61.32, 73.37, 67.33, 79.31, 71.70, 64.65, 71.21, …\n```\n\n\n:::\n:::\n\n\nThe raw tourism data has 30,800 rows and 7 columns. This data will serve as the attribute table that we will use moving forward.\n\nNow, we will perform following actions using the code chunk below:\n\n-   Exclude fields that contain text in thai language - province_thai, region_thai\n\n-   Create new fields for month and year using the existing date field\n\n-   Unpivot the variable & value columns to expose new fields for our analysis\n\n-   Convert revenue fields to be shown in the thousands\n\n-   Rename fields to a more appropriate name\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- tourism %>%\n  select(1,3,5,6,7) %>%\n  mutate(month = month(date, label = TRUE, abbr = TRUE),\n         year = year(date)) %>%\n  pivot_wider(names_from = variable,\n              values_from = value) %>%\n  mutate(revenue_all = revenue_all/1000,\n         revenue_thai = revenue_thai/1000,\n         revenue_foreign = revenue_foreign/1000) %>%\n  rename(province = province_eng,\n         region = region_eng,\n         revenue_all_K = revenue_all,\n         revenue_thai_K = revenue_thai,\n         revenue_foreign_K = revenue_foreign)\n```\n:::\n\n\nLet's take a look at the cleaned up tourism data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(tourism)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,850\nColumns: 13\n$ date               <date> 2019-01-01, 2019-01-01, 2019-01-01, 2019-01-01, 20…\n$ province           <chr> \"Bangkok\", \"Lopburi\", \"Phra Nakhon Si Ayutthaya\", \"…\n$ region             <chr> \"central\", \"central\", \"central\", \"central\", \"centra…\n$ month              <ord> Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, J…\n$ year               <dbl> 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 201…\n$ ratio_tourist_stay <dbl> 93.37, 61.32, 73.37, 67.33, 79.31, 71.70, 64.65, 71…\n$ no_tourist_stay    <dbl> 3334971, 51858, 117052, 89850, 27141, 118629, 18147…\n$ no_tourist_all     <dbl> 5959075, 268664, 730329, 207236, 79073, 296107, 494…\n$ no_tourist_thai    <dbl> 3534061, 266301, 561553, 201400, 78514, 284408, 491…\n$ no_tourist_foreign <dbl> 2425014, 2363, 168776, 5836, 559, 11699, 248, 5281,…\n$ revenue_all_K      <dbl> 81926490, 457240, 1438730, 347790, 101790, 407980, …\n$ revenue_thai_K     <dbl> 29742580, 451830, 1054250, 336190, 100900, 391120, …\n$ revenue_foreign_K  <dbl> 52183910, 5410, 384480, 11600, 890, 16860, 390, 575…\n```\n\n\n:::\n:::\n\n\nThe updated tourism data has 3,850 rows and 13 columns. Let's analyse the fields that we have now.\n\n| S.No | Field                  | Description                                                 |\n|---------------|-----------------|----------------------------------------|\n| 1    | Date                   | Day-Month-Year of when the statistic was recorded           |\n| 2    | Province               | Name of Province in Thailand                                |\n| 3    | Region                 | Name of Region to which the Province belongs to in Thailand |\n| 4    | Month                  | Month of when statistic was recorded                        |\n| 5    | Year                   | Year of when statistic was recorded                         |\n| 6    | Ratio Tourist Stay     | Ratio of tourists who stayed overnight in the Province      |\n| 7    | No Tourist Stay        | Number of tourists who stayed overnight in the Province     |\n| 8    | No Tourist All         | Number of Domestic tourists who visited the Province        |\n| 9    | No Tourist Thai        | Number of Thai tourists who visited the Province            |\n| 10   | No Tourist Foreign     | Number of Foreign tourists who visited the Province         |\n| 11   | Revenue All (in K)     | Revenue generated by tourism industry in the Province       |\n| 12   | Revenue Thai (in K)    | Revenue generated by Thai tourists in the Province          |\n| 13   | Revenue Foreign (in K) | Revenue generated by Foreign tourists in the Province       |\n\nWe can view the summary statistics of these newly exposed fields using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(tourism)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      date              province            region              month     \n Min.   :2019-01-01   Length:3850        Length:3850        Jan    : 385  \n 1st Qu.:2020-01-01   Class :character   Class :character   Feb    : 385  \n Median :2021-01-16   Mode  :character   Mode  :character   Mar    : 308  \n Mean   :2021-01-15                                         Apr    : 308  \n 3rd Qu.:2022-02-01                                         May    : 308  \n Max.   :2023-02-01                                         Jun    : 308  \n                                                            (Other):1848  \n      year      ratio_tourist_stay no_tourist_stay   no_tourist_all   \n Min.   :2019   Min.   : 0.00      Min.   :      0   Min.   :      0  \n 1st Qu.:2020   1st Qu.:20.18      1st Qu.:  16271   1st Qu.:  39092  \n Median :2021   Median :41.81      Median :  44579   Median :  92122  \n Mean   :2021   Mean   :38.93      Mean   : 105161   Mean   : 206328  \n 3rd Qu.:2022   3rd Qu.:56.20      3rd Qu.:  90902   3rd Qu.: 203646  \n Max.   :2023   Max.   :95.86      Max.   :3335728   Max.   :6131044  \n                                                                      \n no_tourist_thai   no_tourist_foreign  revenue_all_K       revenue_thai_K    \n Min.   :      0   Min.   :      0.0   Min.   :        0   Min.   :       0  \n 1st Qu.:  37169   1st Qu.:     49.2   1st Qu.:    63322   1st Qu.:   59250  \n Median :  88782   Median :    553.0   Median :   195495   Median :  177310  \n Mean   : 173962   Mean   :  32366.1   Mean   :  1343876   Mean   :  663644  \n 3rd Qu.: 184256   3rd Qu.:   5189.5   3rd Qu.:   506000   3rd Qu.:  460025  \n Max.   :4087756   Max.   :2473725.0   Max.   :110287280   Max.   :45060240  \n                                                                             \n revenue_foreign_K \n Min.   :      -4  \n 1st Qu.:     110  \n Median :    1540  \n Mean   :  680232  \n 3rd Qu.:   17420  \n Max.   :85025200  \n                   \n```\n\n\n:::\n:::\n\n\nWe can also perform exploratory data analysis using the code chunk below. By plotting histograms, we can easily identify the overall distribution of the data values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=tourism, \n       aes(x=`ratio_tourist_stay`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex02A_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nFrom the above plot, we can see that majority of the ratios are concentrated between 25% and 75%. The highest frequency appears around the 50% mark, indicating that a significant portion of tourists tend to stay overnight about half the time. However, this distribution tails off towards the extremes (near 100%), suggesting that fewer tourists stay overnight very frequently.\n\n### 3.2 Boundary Data\n\nLikewise, we can run the glimpse() function on the boundaries data for some quick insights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(boundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 17\n$ Shape_Leng <dbl> 2.417227, 1.695100, 1.251111, 1.884945, 3.041716, 1.739908,…\n$ Shape_Area <dbl> 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.21393797,…\n$ ADM1_EN    <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"P…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"สมุทรปราการ\", \"นนทบุรี\", \"ปทุมธานี\", \"พระนครศรีอ…\n$ ADM1_PCODE <chr> \"TH10\", \"TH11\", \"TH12\", \"TH13\", \"TH14\", \"TH15\", \"TH16\", \"TH…\n$ ADM1_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((100.6139 13..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\nThe raw boundaries data has 77 rows and 17 columns. This data contains the geospatial information we require for our analysis.\n\nNow, we will perform following actions using the code chunk below:\n\n-   Exclude fields that contain text in thai language - ADM1_TH, ADM1ALT1TH, ADM1ALT2TH, ADM0_TH\n\n-   Exclude fields that contain only one value - ADM1_REF, ADM1ALT1EN, ADM1ALT2EN, ADM0_EN, ADM0_PCODE, date, validOn, validTo\n\n-   Exclude unnecessary fields that we will not use in our analysis - Shape_Leng, Shape_Area, ADM1_PCODE\n\n-   Rename fields to a more appropriate name\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboundaries <- boundaries %>%\n  select(3, 17) %>%\n  rename(province = ADM1_EN)\n```\n:::\n\n\nWe also want to keep the geometry field as a polygon instead of a multipolygon object. For this, we will first cast the geometry field into a polygon type, and then merge the polygons for each province into a single polygon.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nboundary <- boundaries %>%\n  group_by(province) %>%\n  summarise(geometry = st_union(geometry))\n\nboundary$geometry <- st_cast(boundary$geometry, \"POLYGON\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\nWarning in st_cast.MULTIPOLYGON(X[[i]], ...): polygon from first part only\n```\n\n\n:::\n\n```{.r .cell-code}\nwrite_rds(boundary, \"data/rds/boundary.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the saved tourism.rds into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboundary <- read_rds(\"data/rds/boundary.rds\")\n```\n:::\n\n\nLet's take a look at the cleaned up tourism data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(boundary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 2\n$ province <chr> \"Amnat Charoen\", \"Ang Thong\", \"Bangkok\", \"Bueng Kan\", \"Buri R…\n$ geometry <POLYGON [°]> POLYGON ((104.9598 16.28368..., POLYGON ((100.3329 14…\n```\n\n\n:::\n:::\n\n\nThe updated tourism data has 77 rows and 2 columns. Let's analyse the fields that we have now.\n\n| S.No | Field    | Description                                              |\n|------|----------|----------------------------------------------------------|\n| 1    | Province | Name of Province in Thailand                             |\n| 2    | Geometry | Polygon object that represents each Province in Thailand |\n\n### 3.3 Performing Relational Join\n\nBefore we perform exploratory data analysis, we need to combine both the geospatial data and the aspatial data into one. This will be performed using the left_join function of dplyr package. The boundaries data will be used as the base data object, and the tourism data will be used as the join table.\n\nThe code chunk below is used to perform the task. The unique identifier that is used to join both data objects are province.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\ntourismBoundaries <- left_join(boundary, \n                               tourism, \n                               by=c(\"province\"=\"province\"))\nwrite_rds(tourismBoundaries, \"data/rds/tourismBoundaries.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the saved tourism.rds into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourismBoundaries <- read_rds(\"data/rds/tourismBoundaries.rds\")\n```\n:::\n\n\nNote that no new output data has been created. Instead, the data fields from tourism data frame are now updated into the data frame of boundaries. Let's take a quick look at this joined data using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(tourismBoundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,458\nColumns: 14\n$ province           <chr> \"Amnat Charoen\", \"Amnat Charoen\", \"Amnat Charoen\", …\n$ geometry           <POLYGON [°]> POLYGON ((104.9598 16.28368..., POLYGON ((1…\n$ date               <date> 2019-01-01, 2020-01-01, 2021-01-01, 2022-01-01, 20…\n$ region             <chr> \"east_northeast\", \"east_northeast\", \"east_northeast…\n$ month              <ord> Jan, Jan, Jan, Jan, Jan, Feb, Feb, Feb, Feb, Feb, M…\n$ year               <dbl> 2019, 2020, 2021, 2022, 2023, 2019, 2020, 2021, 202…\n$ ratio_tourist_stay <dbl> 65.15, 58.36, 26.61, 37.36, 39.46, 63.30, 56.73, 28…\n$ no_tourist_stay    <dbl> 8551, 8260, 5002, 6918, 6934, 8001, 7510, 5283, 524…\n$ no_tourist_all     <dbl> 21790, 21009, 20364, 22648, 23112, 20377, 19126, 18…\n$ no_tourist_thai    <dbl> 20972, 20220, 20364, 22568, 22684, 19597, 18394, 18…\n$ no_tourist_foreign <dbl> 818, 789, 0, 80, 428, 780, 732, 0, 38, 400, 693, 82…\n$ revenue_all_K      <dbl> 34510, 33020, 28540, 24930, 25960, 32290, 30230, 26…\n$ revenue_thai_K     <dbl> 32640, 31290, 28540, 24690, 25170, 30500, 28570, 26…\n$ revenue_foreign_K  <dbl> 1870, 1730, 0, 240, 790, 1790, 1660, 0, 80, 720, 15…\n```\n\n\n:::\n:::\n\n\nThe joined tourismBoundaries data has 3,458 rows and 14 columns. We can now perform exploratory data analysis using this joined data.\n\nTo have a quick look at the distribution of average ratio of tourists who stayed overnight at Thailand at Province level, a choropleth map will be prepared.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourismBoundaries2023 <- tourismBoundaries %>%\n  filter(year == 2023) %>%\n  group_by(province) %>%\n  summarize(ratio_tourist_stay = mean(`ratio_tourist_stay`, na.rm = TRUE))\n\nggplot(data = tourismBoundaries2023) +\n  geom_sf(aes(fill = `ratio_tourist_stay`),\n          color = NA) +\n  scale_fill_viridis_c(option = \"plasma\",\n                       name = \"Ratio Tourist Stay\") +\n  labs(title = \"Choropleth Map of Ratio of Tourists Who Stayed Overnight in 2023\",\n       subtitle = \"Average Ratio per Province\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex02A_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nThe choropleth map visualizes the average ratio of tourists who stayed overnight across the difference provinces in Thailand for 2023. The color of darker purple indicates lower ratios, while bright yellow represents high ratios. This allows us to easily identify regions with varying tourist overnight stays ratios.\n\n## 4.0 Global Spatial Autocorrelation Analysis\n\nWe will now proceed to compute global spatial autocorrelation statistics and perform spatial complete randomness test for global spatial autocorrelation.\n\nxx\n\n## Local Spatial Autocorrelation Analysis\n\nxx\n\n## Emerging Hot Spot Analysis\n\nxx\n",
    "supporting": [
      "Take-Home_Ex02A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}