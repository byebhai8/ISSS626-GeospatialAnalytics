{
  "hash": "a91cfd6102bb97c1952d45caf13c64d6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 04\"\nauthor: \"Bhairavi Vairavelu\"\ndate: \"Sep 14 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# Spatial Weights & Applications\n\n## 1. Overview\n\nThe aim of this exercise is to:\n\n-   Import geospatial data using appropriate functions of sf package\n-   Import csv file using appropriate functions of readr package\n-   Perform relational join using appropriate functions of dplyr package\n-   Compute spatial weights using appropriate functions of spdep package\n-   Calculate spatially lagged variables using appropriate functions of spdep package\n\n## 2. Study Area & Data\n\nWe will be using two data sets in this exercise\n\n-   Hunan county boundary layer, which is a geospatial data set in ESRI shapefile format\n\n-   Hunan_2012.csv, which is a csv file containing selected Hunan’s local development indicators in 2012\n\n### 2.1 Getting Started\n\nBefore we proceed, let's ensure that spdep, sf, tmap and tidyverse packages of R are installed and launched in R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n```\n:::\n\n\n## 3. Getting the Data\n\nWe will be importing the geospatial data which is in ESRI shapefile format, as well as the associated attribute table which is in csv format, into R.\n\n### 3.1 Importing shapefile\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. This imported shapefile will be a simple feature object of sf.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `C:\\byebhai8\\ISSS626-GeospatialAnalytics\\Hands-On_Ex\\Hands-on_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nwrite_rds(hunan, \"data/rds/hunan.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- read_rds(\"data/rds/hunan.rds\")\n```\n:::\n\n\n### 3.2 Importing csv file\n\nNext, we will import the Hunan_2012.csv into R by using read_csv)_ of readr package. The output is a R dataframe class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nwrite_rds(hunan2012, \"data/rds/hunan2012.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_rds(\"data/rds/hunan2012.rds\")\n```\n:::\n\n\n### 3.3 Performing relational joins\n\nThe code chunk below will be used to update the attribute table of hunan's SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This will be performed using the left_join() of dplyr package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nhunan <- left_join(hunan,hunan2012)%>%\n  select(1:4, 7, 15)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(County)`\n```\n\n\n:::\n\n```{.r .cell-code}\nwrite_rds(hunan, \"data/rds/hunan2.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- read_rds(\"data/rds/hunan2.rds\")\n```\n:::\n\n\n## 4. Visualizing Regional Development Indicator\n\nWe will be preparing a basemap and a choropleth map showing the distribution of GDPPC2012 by using qtm() of tmap package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## 5. Computing Contiguity Spatial Weights\n\nWe will be using poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.\n\n### 5.1 Computing (QUEEN) Contiguity\n\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nwm_q <- poly2nb(hunan, queen=TRUE)\nwrite_rds(wm_q, \"data/rds/wm_q.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- read_rds(\"data/rds/wm_q.rds\")\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n```\n\n\n:::\n:::\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. Also, there are two area units with only one neighbour.\n\nwm_q helps to list all neighboring polygons for each polygon in our polygon object. We will use the code chunk below to see the neighbors for the first polygon in the object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  3  4 57 85\n```\n\n\n:::\n:::\n\n\nThe above shows that Polygon 1 has 5 neighbours. These numbers represent the polygon IDs which are stored in hunan SpatialPolygonsDataFrame class.\n\nWe will use the code chunk below to retrieve the county name of Polygon ID = 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan$County[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Anxiang\"\n```\n\n\n:::\n:::\n\n\nThe above shows that Polygon ID=1 is Anxiang county.\n\nWe will use the code chunk below to reveal the county names of the five neighbouring polygons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan$NAME_3[c(2,3,4,57,85)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n```\n\n\n:::\n:::\n\n\nWe will use the code chunk below to retrieve the GDPPC of these five counties.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20981 34592 24473 21311 22879\n```\n\n\n:::\n:::\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\n\nWe will use the code chunk below to display the complete weight matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# str(wm_q)\n```\n:::\n\n\n### 5.2 Creating (ROOK) Contiguity\n\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nwm_r <- poly2nb(hunan, queen=FALSE)\nwrite_rds(wm_r, \"data/rds/wm_r.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_r <- read_rds(\"data/rds/wm_r.rds\")\nsummary(wm_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n```\n\n\n:::\n:::\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. Also, there are two area units with only one neighbour.\n\n### 5.3 Visualizing Contiguity Weights\n\nTo get our longitude values that we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n```\n:::\n\n\nWe will do the same for latitude values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\nNow, since we have both the longitude and latitude, we will use cbind to put longitude and latitude into the same object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\ncoords <- cbind(longitude, latitude)\nwrite_rds(coords, \"data/rds/coords.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- read_rds(\"data/rds/coords.rds\")\n```\n:::\n\n\nWe will use the code chunk below to check the first few observations to see if things are formatted correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(coords)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n```\n\n\n:::\n:::\n\n\n#### 5.3.1 Plotting Queen Contiguity\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n#### 5.3.2 Plotting Rook Contiguity\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n#### 5.3.3. Plotting Both Contiguities\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## 6. Computing Distance-based Neighbours\n\nWe will be using dnearneigh() of spdep package to derive distance-baed weight matrices.\n\n### 6.1 Determininng cut-off distance\n\nWe will need to determine the upper limit for distance band:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nk1 <- knn2nb(knearneigh(coords))\nwrite_rds(k1, \"data/rds/k1.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nk1 <- read_rds(\"data/rds/k1.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nwrite_rds(k1dists, \"data/rds/k1dists.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nk1dists <- read_rds(\"data/rds/k1dists.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(k1dists)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n```\n\n\n:::\n:::\n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n### 6.2 Computing fixed distance weight matrix\n\nWe will usednearneigh() as shown in the code chunk below to compute the distance weight matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwrite_rds(wm_d62, \"data/rds/wm_d62.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_d62 <- read_rds(\"data/rds/wm_d62.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_d62\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n```\n\n\n:::\n:::\n\n\nThe above summary report shows that on average, each unity has approx. 3.68 neighbouring units - likely that some have 3, while others have 4, hence we get this decimal output.\n\nNext, we will be using the str() to display the content of wm_d62 weight matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# str(wm_d62)\n```\n:::\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# table(hunan$County, card(wm_d62))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(n_comp$comp.id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 1 \n88 \n```\n\n\n:::\n:::\n\n\n#### 6.2.1 Plotting fixed distance weight matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\n\nWe can also plot both of them next to each other by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n### 6.3 Computing adaptive distancee weight matrix\n\nWe can control the number of neighbours directly by using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nknn6 <- knn2nb(knearneigh(coords, k=6))\nwrite_rds(knn6, \"data/rds/knn6.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknn6 <- read_rds(\"data/rds/knn6.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknn6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n```\n\n\n:::\n:::\n\n\nSimilarly, we can display the content of the matrix by using str():\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# str(knn6)\n```\n:::\n\n\n#### 6.3.1 Plotting distance based neighbours\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n## 7. Weights based on IDW\n\nWe will derive a spatial weight matrix based on the Inversed Distance method.\n\nFirst, we need to compute the distances between areas by using nbdlists() of spdep.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nwrite_rds(dist, \"data/rds/dist.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndist <- read_rds(\"data/rds/dist.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nids <- lapply(dist, function(x) 1/(x))\nwrite_rds(ids, \"data/rds/ids.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nids <- read_rds(\"data/rds/ids.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# ids\n```\n:::\n\n\n## 8. Row-standardized Weights Matrix\n\nNext, we need to assign weights to each neighboring polygon. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nwrite_rds(rswm_q, \"data/rds/rswm_q.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q <- read_rds(\"data/rds/rswm_q.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n```\n\n\n:::\n:::\n\n\nTo see the weight of the first polygon’s eight neighbors type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q$weights[10]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n```\n\n\n:::\n:::\n\n\nWe can also derive a row standardised distance weight matrix by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nwrite_rds(rswm_ids, \"data/rds/rswm_ids.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_ids <- read_rds(\"data/rds/rswm_ids.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_ids\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_ids$weights[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(unlist(rswm_ids$weights))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n```\n\n\n:::\n:::\n\n\n## 9. Application of Spatial Weight Matrix\n\nWe will be creating four different spatial lagged variables:\n\n-   Spatial lag with row-standardized weights\n\n-   Spatial lag as a sum of neighbouring values\n\n-   Spatial window average\n\n-   Spatial window sum\n\n### 9.1 Spatial lag with row-standardized weights\n\nWe will compute the average neighbor GDPPC value for each polygon. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n```\n\n\n:::\n:::\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(NAME_3)`\n```\n\n\n:::\n:::\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(hunan)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n```\n\n\n:::\n:::\n\n\nWe will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n:::\n\n\n### 9.2 Spatial lag as a sum of neighbouring values\n\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n```\n\n\n:::\n:::\n\n\nWe can use lag.listw to compute a lag variable from our weight and GDPPC.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n```\n:::\n\n\nWe can examine the result by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# lag_sum\n```\n:::\n\n\nWe will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(hunan, lag.res)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(NAME_3)`\n```\n\n\n:::\n:::\n\n\nWe can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n:::\n\n\n### 9.3 Spatial window average\n\nThe spatial window average uses row-standardized weights and includes the diagonal element. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_qs <- include.self(wm_q)\n```\n:::\n\n\nLet's review the neighbour list of area [1] by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_qs[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  2  3  4 57 85\n```\n\n\n:::\n:::\n\n\nWe can obtain weights using nb2listw().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_qs <- nb2listw(wm_qs)\nwm_qs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n```\n\n\n:::\n:::\n\n\nWe need to create the lag variable from our weight structure and GDPPC variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlag_w_avg_gpdpc <- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n```\n\n\n:::\n:::\n\n\nWe will convert the lag variable listw object into a data.frame by using as.data.frame().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res <- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n```\n:::\n\n\nThe code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(hunan, lag_wm_qs.res)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(NAME_3)`\n```\n\n\n:::\n:::\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan %>%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|County        | lag GDPPC| lag_window_avg GDPPC|geometry                       |\n|:-------------|---------:|--------------------:|:------------------------------|\n|Anxiang       |  24847.20|             24650.50|POLYGON ((112.0625 29.75523... |\n|Hanshou       |  22724.80|             22434.17|POLYGON ((112.2288 29.11684... |\n|Jinshi        |  24143.25|             26233.00|POLYGON ((111.8927 29.6013,... |\n|Li            |  27737.50|             27084.60|POLYGON ((111.3731 29.94649... |\n|Linli         |  27270.25|             26927.00|POLYGON ((111.6324 29.76288... |\n|Shimen        |  21248.80|             22230.17|POLYGON ((110.8825 30.11675... |\n|Liuyang       |  43747.00|             47621.20|POLYGON ((113.9905 28.5682,... |\n|Ningxiang     |  33582.71|             37160.12|POLYGON ((112.7181 28.38299... |\n|Wangcheng     |  45651.17|             49224.71|POLYGON ((112.7914 28.52688... |\n|Anren         |  32027.62|             29886.89|POLYGON ((113.1757 26.82734... |\n|Guidong       |  32671.00|             26627.50|POLYGON ((114.1799 26.20117... |\n|Jiahe         |  20810.00|             22690.17|POLYGON ((112.4425 25.74358... |\n|Linwu         |  25711.50|             25366.40|POLYGON ((112.5914 25.55143... |\n|Rucheng       |  30672.33|             25825.75|POLYGON ((113.6759 25.87578... |\n|Yizhang       |  33457.75|             30329.00|POLYGON ((113.2621 25.68394... |\n|Yongxing      |  31689.20|             32682.83|POLYGON ((113.3169 26.41843... |\n|Zixing        |  20269.00|             25948.62|POLYGON ((113.7311 26.16259... |\n|Changning     |  23901.60|             23987.67|POLYGON ((112.6144 26.60198... |\n|Hengdong      |  25126.17|             25463.14|POLYGON ((113.1056 27.21007... |\n|Hengnan       |  21903.43|             21904.38|POLYGON ((112.7599 26.98149... |\n|Hengshan      |  22718.60|             23127.50|POLYGON ((112.607 27.4689, ... |\n|Leiyang       |  25918.80|             25949.83|POLYGON ((112.9996 26.69276... |\n|Qidong        |  20307.00|             20018.75|POLYGON ((111.7818 27.0383,... |\n|Chenxi        |  20023.80|             19524.17|POLYGON ((110.2624 28.21778... |\n|Zhongfang     |  16576.80|             18955.00|POLYGON ((109.9431 27.72858... |\n|Huitong       |  18667.00|             17800.40|POLYGON ((109.9419 27.10512... |\n|Jingzhou      |  14394.67|             15883.00|POLYGON ((109.8186 26.75842... |\n|Mayang        |  19848.80|             18831.33|POLYGON ((109.795 27.98008,... |\n|Tongdao       |  15516.33|             14832.50|POLYGON ((109.9294 26.46561... |\n|Xinhuang      |  20518.00|             17965.00|POLYGON ((109.227 27.43733,... |\n|Xupu          |  17572.00|             17159.89|POLYGON ((110.7189 28.30485... |\n|Yuanling      |  15200.12|             16199.44|POLYGON ((110.9652 28.99895... |\n|Zhijiang      |  18413.80|             18764.50|POLYGON ((109.8818 27.60661... |\n|Lengshuijiang |  14419.33|             26878.75|POLYGON ((111.5307 27.81472... |\n|Shuangfeng    |  24094.50|             23188.86|POLYGON ((112.263 27.70421,... |\n|Xinhua        |  22019.83|             20788.14|POLYGON ((111.3345 28.19642... |\n|Chengbu       |  12923.50|             12365.20|POLYGON ((110.4455 26.69317... |\n|Dongan        |  14756.00|             15985.00|POLYGON ((111.4531 26.86812... |\n|Dongkou       |  13869.80|             13764.83|POLYGON ((110.6622 27.37305... |\n|Longhui       |  12296.67|             11907.43|POLYGON ((110.985 27.65983,... |\n|Shaodong      |  15775.17|             17128.14|POLYGON ((111.9054 27.40254... |\n|Suining       |  14382.86|             14593.62|POLYGON ((110.389 27.10006,... |\n|Wugang        |  11566.33|             11644.29|POLYGON ((110.9878 27.03345... |\n|Xinning       |  13199.50|             12706.00|POLYGON ((111.0736 26.84627... |\n|Xinshao       |  23412.00|             21712.29|POLYGON ((111.6013 27.58275... |\n|Shaoshan      |  39541.00|             43548.25|POLYGON ((112.5391 27.97742... |\n|Xiangxiang    |  36186.60|             35049.00|POLYGON ((112.4549 28.05783... |\n|Baojing       |  16559.60|             16226.83|POLYGON ((109.7015 28.82844... |\n|Fenghuang     |  20772.50|             19294.40|POLYGON ((109.5239 28.19206... |\n|Guzhang       |  19471.20|             18156.00|POLYGON ((109.8968 28.74034... |\n|Huayuan       |  19827.33|             19954.75|POLYGON ((109.5647 28.61712... |\n|Jishou        |  15466.80|             18145.17|POLYGON ((109.8375 28.4696,... |\n|Longshan      |  12925.67|             12132.75|POLYGON ((109.6337 29.62521... |\n|Luxi          |  18577.17|             18419.29|POLYGON ((110.1067 28.41835... |\n|Yongshun      |  14943.00|             14050.83|POLYGON ((110.0003 29.29499... |\n|Anhua         |  24913.00|             23619.75|POLYGON ((111.6034 28.63716... |\n|Nan           |  25093.00|             24552.71|POLYGON ((112.3232 29.46074... |\n|Yuanjiang     |  24428.80|             24733.67|POLYGON ((112.4391 29.1791,... |\n|Jianghua      |  17003.00|             16762.60|POLYGON ((111.6461 25.29661... |\n|Lanshan       |  21143.75|             20932.60|POLYGON ((112.2286 25.61123... |\n|Ningyuan      |  20435.00|             19467.75|POLYGON ((112.0715 26.09892... |\n|Shuangpai     |  17131.33|             18334.00|POLYGON ((111.8864 26.11957... |\n|Xintian       |  24569.75|             22541.00|POLYGON ((112.2578 26.0796,... |\n|Huarong       |  23835.50|             26028.00|POLYGON ((112.9242 29.69134... |\n|Linxiang      |  26360.00|             29128.50|POLYGON ((113.5502 29.67418... |\n|Miluo         |  47383.40|             46569.00|POLYGON ((112.9902 29.02139... |\n|Pingjiang     |  55157.75|             47576.60|POLYGON ((113.8436 29.06152... |\n|Xiangyin      |  37058.00|             36545.50|POLYGON ((112.9173 28.98264... |\n|Cili          |  21546.67|             20838.50|POLYGON ((110.8822 29.69017... |\n|Chaling       |  23348.67|             22531.00|POLYGON ((113.7666 27.10573... |\n|Liling        |  42323.67|             42115.50|POLYGON ((113.5673 27.94346... |\n|Yanling       |  28938.60|             27619.00|POLYGON ((113.9292 26.6154,... |\n|You           |  25880.80|             27611.33|POLYGON ((113.5879 27.41324... |\n|Zhuzhou       |  47345.67|             44523.29|POLYGON ((113.2493 28.02411... |\n|Sangzhi       |  18711.33|             18127.43|POLYGON ((110.556 29.40543,... |\n|Yueyang       |  29087.29|             28746.38|POLYGON ((113.343 29.61064,... |\n|Qiyang        |  20748.29|             20734.50|POLYGON ((111.5563 26.81318... |\n|Taojiang      |  35933.71|             33880.62|POLYGON ((112.0508 28.67265... |\n|Shaoyang      |  15439.71|             14716.38|POLYGON ((111.5013 27.30207... |\n|Lianyuan      |  29787.50|             28516.22|POLYGON ((111.6789 28.02946... |\n|Hongjiang     |  18145.00|             18086.14|POLYGON ((110.1441 27.47513... |\n|Hengyang      |  21617.00|             21244.50|POLYGON ((112.7144 26.98613... |\n|Guiyang       |  29203.89|             29568.80|POLYGON ((113.0811 26.04963... |\n|Changsha      |  41363.67|             48119.71|POLYGON ((112.9421 28.03722... |\n|Taoyuan       |  22259.09|             22310.75|POLYGON ((112.0612 29.32855... |\n|Xiangtan      |  44939.56|             43151.60|POLYGON ((113.0426 27.8942,... |\n|Dao           |  16902.00|             17133.40|POLYGON ((111.498 25.81679,... |\n|Jiangyong     |  16930.00|             17009.33|POLYGON ((111.3659 25.39472... |\n\n\n:::\n:::\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::\n\n\n### 9.4 Spatial window sum\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_qs <- include.self(wm_q)\nwm_qs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n```\n\n\n:::\n:::\n\n\nWe will assign binary weights to the neighbour structure that includes the diagonal element.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb_weights <- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1 1 1 1 1 1\n```\n\n\n:::\n:::\n\n\nWe will use nb2listw() and glist() to explicitly assign weight values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb_weights2 <- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n```\n\n\n:::\n:::\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n```\n\n\n:::\n:::\n\n\nWe will convert the lag variable listw object into a data.frame by using as.data.frame().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n```\n:::\n\n\nThe code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(hunan, w_sum_gdppc.res)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(NAME_3)`\n```\n\n\n:::\n:::\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan %>%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|County        | lag_sum GDPPC| w_sum GDPPC|geometry                       |\n|:-------------|-------------:|-----------:|:------------------------------|\n|Anxiang       |        124236|      147903|POLYGON ((112.0625 29.75523... |\n|Hanshou       |        113624|      134605|POLYGON ((112.2288 29.11684... |\n|Jinshi        |         96573|      131165|POLYGON ((111.8927 29.6013,... |\n|Li            |        110950|      135423|POLYGON ((111.3731 29.94649... |\n|Linli         |        109081|      134635|POLYGON ((111.6324 29.76288... |\n|Shimen        |        106244|      133381|POLYGON ((110.8825 30.11675... |\n|Liuyang       |        174988|      238106|POLYGON ((113.9905 28.5682,... |\n|Ningxiang     |        235079|      297281|POLYGON ((112.7181 28.38299... |\n|Wangcheng     |        273907|      344573|POLYGON ((112.7914 28.52688... |\n|Anren         |        256221|      268982|POLYGON ((113.1757 26.82734... |\n|Guidong       |         98013|      106510|POLYGON ((114.1799 26.20117... |\n|Jiahe         |        104050|      136141|POLYGON ((112.4425 25.74358... |\n|Linwu         |        102846|      126832|POLYGON ((112.5914 25.55143... |\n|Rucheng       |         92017|      103303|POLYGON ((113.6759 25.87578... |\n|Yizhang       |        133831|      151645|POLYGON ((113.2621 25.68394... |\n|Yongxing      |        158446|      196097|POLYGON ((113.3169 26.41843... |\n|Zixing        |        141883|      207589|POLYGON ((113.7311 26.16259... |\n|Changning     |        119508|      143926|POLYGON ((112.6144 26.60198... |\n|Hengdong      |        150757|      178242|POLYGON ((113.1056 27.21007... |\n|Hengnan       |        153324|      175235|POLYGON ((112.7599 26.98149... |\n|Hengshan      |        113593|      138765|POLYGON ((112.607 27.4689, ... |\n|Leiyang       |        129594|      155699|POLYGON ((112.9996 26.69276... |\n|Qidong        |        142149|      160150|POLYGON ((111.7818 27.0383,... |\n|Chenxi        |        100119|      117145|POLYGON ((110.2624 28.21778... |\n|Zhongfang     |         82884|      113730|POLYGON ((109.9431 27.72858... |\n|Huitong       |         74668|       89002|POLYGON ((109.9419 27.10512... |\n|Jingzhou      |         43184|       63532|POLYGON ((109.8186 26.75842... |\n|Mayang        |         99244|      112988|POLYGON ((109.795 27.98008,... |\n|Tongdao       |         46549|       59330|POLYGON ((109.9294 26.46561... |\n|Xinhuang      |         20518|       35930|POLYGON ((109.227 27.43733,... |\n|Xupu          |        140576|      154439|POLYGON ((110.7189 28.30485... |\n|Yuanling      |        121601|      145795|POLYGON ((110.9652 28.99895... |\n|Zhijiang      |         92069|      112587|POLYGON ((109.8818 27.60661... |\n|Lengshuijiang |         43258|      107515|POLYGON ((111.5307 27.81472... |\n|Shuangfeng    |        144567|      162322|POLYGON ((112.263 27.70421,... |\n|Xinhua        |        132119|      145517|POLYGON ((111.3345 28.19642... |\n|Chengbu       |         51694|       61826|POLYGON ((110.4455 26.69317... |\n|Dongan        |         59024|       79925|POLYGON ((111.4531 26.86812... |\n|Dongkou       |         69349|       82589|POLYGON ((110.6622 27.37305... |\n|Longhui       |         73780|       83352|POLYGON ((110.985 27.65983,... |\n|Shaodong      |         94651|      119897|POLYGON ((111.9054 27.40254... |\n|Suining       |        100680|      116749|POLYGON ((110.389 27.10006,... |\n|Wugang        |         69398|       81510|POLYGON ((110.9878 27.03345... |\n|Xinning       |         52798|       63530|POLYGON ((111.0736 26.84627... |\n|Xinshao       |        140472|      151986|POLYGON ((111.6013 27.58275... |\n|Shaoshan      |        118623|      174193|POLYGON ((112.5391 27.97742... |\n|Xiangxiang    |        180933|      210294|POLYGON ((112.4549 28.05783... |\n|Baojing       |         82798|       97361|POLYGON ((109.7015 28.82844... |\n|Fenghuang     |         83090|       96472|POLYGON ((109.5239 28.19206... |\n|Guzhang       |         97356|      108936|POLYGON ((109.8968 28.74034... |\n|Huayuan       |         59482|       79819|POLYGON ((109.5647 28.61712... |\n|Jishou        |         77334|      108871|POLYGON ((109.8375 28.4696,... |\n|Longshan      |         38777|       48531|POLYGON ((109.6337 29.62521... |\n|Luxi          |        111463|      128935|POLYGON ((110.1067 28.41835... |\n|Yongshun      |         74715|       84305|POLYGON ((110.0003 29.29499... |\n|Anhua         |        174391|      188958|POLYGON ((111.6034 28.63716... |\n|Nan           |        150558|      171869|POLYGON ((112.3232 29.46074... |\n|Yuanjiang     |        122144|      148402|POLYGON ((112.4391 29.1791,... |\n|Jianghua      |         68012|       83813|POLYGON ((111.6461 25.29661... |\n|Lanshan       |         84575|      104663|POLYGON ((112.2286 25.61123... |\n|Ningyuan      |        143045|      155742|POLYGON ((112.0715 26.09892... |\n|Shuangpai     |         51394|       73336|POLYGON ((111.8864 26.11957... |\n|Xintian       |         98279|      112705|POLYGON ((112.2578 26.0796,... |\n|Huarong       |         47671|       78084|POLYGON ((112.9242 29.69134... |\n|Linxiang      |         26360|       58257|POLYGON ((113.5502 29.67418... |\n|Miluo         |        236917|      279414|POLYGON ((112.9902 29.02139... |\n|Pingjiang     |        220631|      237883|POLYGON ((113.8436 29.06152... |\n|Xiangyin      |        185290|      219273|POLYGON ((112.9173 28.98264... |\n|Cili          |         64640|       83354|POLYGON ((110.8822 29.69017... |\n|Chaling       |         70046|       90124|POLYGON ((113.7666 27.10573... |\n|Liling        |        126971|      168462|POLYGON ((113.5673 27.94346... |\n|Yanling       |        144693|      165714|POLYGON ((113.9292 26.6154,... |\n|You           |        129404|      165668|POLYGON ((113.5879 27.41324... |\n|Zhuzhou       |        284074|      311663|POLYGON ((113.2493 28.02411... |\n|Sangzhi       |        112268|      126892|POLYGON ((110.556 29.40543,... |\n|Yueyang       |        203611|      229971|POLYGON ((113.343 29.61064,... |\n|Qiyang        |        145238|      165876|POLYGON ((111.5563 26.81318... |\n|Taojiang      |        251536|      271045|POLYGON ((112.0508 28.67265... |\n|Shaoyang      |        108078|      117731|POLYGON ((111.5013 27.30207... |\n|Lianyuan      |        238300|      256646|POLYGON ((111.6789 28.02946... |\n|Hongjiang     |        108870|      126603|POLYGON ((110.1441 27.47513... |\n|Hengyang      |        108085|      127467|POLYGON ((112.7144 26.98613... |\n|Guiyang       |        262835|      295688|POLYGON ((113.0811 26.04963... |\n|Changsha      |        248182|      336838|POLYGON ((112.9421 28.03722... |\n|Taoyuan       |        244850|      267729|POLYGON ((112.0612 29.32855... |\n|Xiangtan      |        404456|      431516|POLYGON ((113.0426 27.8942,... |\n|Dao           |         67608|       85667|POLYGON ((111.498 25.81679,... |\n|Jiangyong     |         33860|       51028|POLYGON ((111.3659 25.39472... |\n\n\n:::\n:::\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-83-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}