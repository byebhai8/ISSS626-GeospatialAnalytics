---
title: "Hands-on Exercise 02B"
author: "Bhairavi Vairavelu"
date: "Sep 01 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# 2nd Order Spatial Point Patterns Analysis Methods

## 1. Overview

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. In this exercise, we aim to discover the spatial point processes of childcare centers in Singapore.

The specific questions we want to answer are the following:

-   Are childcare centers in Singapore randomly distributed throughout the country?

-   If the answer to above qns is No, the next logical qns is where are the locations with higher concentration of childcare centers?

## 2. Data

We will be using 3 data sets:

-   CHILDCARE, a point feature data providing both location and attribute information of childcare centres

-   MP14_SUBZONE_WEB_PL, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data

-   CostalOutline, a polygon feature data showing the national boundary of Singapore

## 3. Installing & Loading R Packages

We will be using 5 R packages -\> sf, spatstat, raster, maptools and tmap.

The code chunk below is used to install and launch the 5 R packages:

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse, maptools)
```

## 4. Spatial Data Wrangling

### 4.1 Importing Spatial Data

We will be using st_read() of sf package to import 3 geospatial data sets into R.

```{r}
#|eval: false
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
write_rds(childcare_sf, "data/rds/childcare_sf2.rds")
```

```{r}
childcare_sf <- read_rds("data/rds/childcare_sf2.rds")
```

```{r}
#|eval: false
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
write_rds(sg_sf, "data/rds/sg_sf2.rds")
```

```{r}
sg_sf <- read_rds("data/rds/sg_sf2.rds")
```

```{r}
#|eval: false
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
write_rds(mpsz_sf, "data/rds/mpsz_sf2.rds")
```

```{r}
mpsz_sf <- read_rds("data/rds/mpsz_sf2.rds")
```

Before we use these data sets, we need to ensure that they are projected in the same projection system.

```{r}
st_crs(childcare_sf)
```

```{r}
st_crs(sg_sf)
```

```{r}
st_crs(mpsz_sf)
```

Notice that except childcare_sf, both mpsz_sf and sg_sf don't have proper crs information. As such, we will be assigning the correct crs to both the mpsz_sf and sg_sf simple feature data frames.

```{r}
sg_sf3414 <- st_set_crs(sg_sf, 3414)
st_crs(sg_sf3414)
```

```{r}
mpsz_sf3414 <- st_set_crs(mpsz_sf, 3414)
st_crs(mpsz_sf3414)
```

### 4.2 Mapping Geospatial Data Sets

It is useful to plot a map to show the spatial patterns of each geospatial data frame.

```{r}
plot(sg_sf3414)
```

```{r}
plot(mpsz_sf3414)
```

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_sf()
```

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```

```{r}
tmap_mode('plot')
```

## 5. Geospatial Data Wrangling

### 5.1 Converting from sf format into spatstat's ppp format

The code chunk below uses as.ppp() of spatstat to convert the spatial data into spatstat's ppp object format:

```{r}
#|eval: false
childcare_ppp <- as.ppp(childcare_sf)
write_rds(childcare_ppp, "data/rds/childcare_ppp2.rds")
```

```{r}
childcare_ppp <- read_rds("data/rds/childcare_ppp2.rds")
```

Let's plot the childcare_ppp and examine the difference:

```{r}
plot(childcare_ppp)
```

The code chunk below retrieves the summary statistics of the newly created ppp object:

```{r}
summary(childcare_ppp)
```

### 5.2 Handling Duplicated Points

We can use the code chunk below to check for duplication in a ppp object:

```{r}
any(duplicated(childcare_ppp))
```

We can use the code chunk below to count the number of co-incidence points:

```{r}
multiplicity(childcare_ppp)
```

We can use the code chunk below to find out how many locations have more than one point event:

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

We can use the code chunk below to view the locations of duplicate point events:

```{r}
tmap_mode('view')
tm_shape(childcare_sf) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

```{r}
tmap_mode('plot')
```

Jittering - this will add a small perturbation to the duplicate points so that they do not occupy the same exact space.

The code chunk below implements the jittering approach:

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

The code chunk below helps to check if there are any duplicated points in this:

```{r}
any(duplicated(childcare_ppp_jit))
```

### 5.3 Creating owin object

The code chunk below is used to convert sg Spatial Polygon object into an owin object of spatstat:

```{r}
#|eval: false
sg_owin <- as.owin(sg_sf)
write_rds(sg_owin, "data/rds/sg_owin2.rds")
```

```{r}
sg_owin <- read_rds("data/rds/sg_owin2.rds")
```

The output object can be displayed using the plot() function:

```{r}
plot(sg_owin)
```

```{r}
summary(sg_owin)
```

### 5.4 Combining point events object & owin object

We will extract childcare events that are located within Singapore using the code chunk below:

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output object combines both the point and polygon feature into one ppp object:

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

The code chunk below will be used to extract the target planning areas:

```{r}
#|eval: false
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
write_rds(pg, "data/rds/pg2.rds")
write_rds(tm, "data/rds/tm2.rds")
write_rds(ck, "data/rds/ck2.rds")
write_rds(jw, "data/rds/jw2.rds")
```

```{r}
pg <- read_rds("data/rds/pg2.rds")
tm <- read_rds("data/rds/tm2.rds")
ck <- read_rds("data/rds/ck2.rds")
jw <- read_rds("data/rds/jw2.rds")
```


Plotting the target planning areas:

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
```

```{r}
plot(tm, main = "Tampines")
```

```{r}
plot(ck, main = "Choa Chu Kang")
```

```{r}
plot(jw, main = "Jurong West")
```

Now we will convert these sf objects into owin objects:

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

The code chunk below will help extract childcare that is within the specific region:

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Next, rescale() function will be used to transform the unit of measurement from metre to kilometre:

```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

The code chunk below is used to plot these 4 study areas and the locations of the childcare centers:

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

## 6. 2nd Order Spatial Point Patterns Analysis

### 6.1 Analysing using G-Function

The G function measures the distribution of the distances from an arbitrary event to its nearest event.

The code chunk below is used to compute G-function using Gest() of spatstat package:

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted.

The test hypotheses are:

H0 = The distribution of childcare services at Choa Chu Kang are randomly distributed

H1 = The distribution of childcare services at Choa Chu Kang are not randomly distributed

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

We will perform the Monte Carlo test with G-function:

```{r}
#|eval: false
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
write_rds(G_CK.csr, "data/rds/G_CK_csr.rds")
```

```{r}
G_CK.csr <- read_rds("data/rds/G_CK_csr.rds")
```

```{r}
plot(G_CK.csr)
```

Computing G-function estimation:

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted.

The test hypotheses are:

H0 = The distribution of childcare services at Tampines are randomly distributed

H1 = The distribution of childcare services at Tampines are not randomly distributed

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing:

```{r}
#|eval: false
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
write_rds(G_tm.csr, "data/rds/G_tm_csr.rds")
```

```{r}
G_tm.csr <- read_rds("data/rds/G_tm_csr.rds")
```


```{r}
plot(G_tm.csr)
```

### 6.2 Analysing using F-Function

The F-function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.

The code chunk below is used to compute F-function using Fest() of spatstat package:

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted.

The test hypotheses are:

H0 = The distribution of childcare services at Choa Chu Kang are randomly distributed

H1 = The distribution of childcare services at Choa Chu Kang are not randomly distributed

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

We will perform the Monte Carlo test with F-function:

```{r}
#|eval: false
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
write_rds(F_CK.csr, "data/rds/F_CK_csr.rds")
```

```{r}
F_CK.csr <- read_rds("data/rds/F_CK_csr.rds")
```


```{r}
plot(F_CK.csr)
```

Computing F-function estimation:

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted.

The test hypotheses are:

H0 = The distribution of childcare services at Tampines are randomly distributed

H1 = The distribution of childcare services at Tampines are not randomly distributed

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing:

```{r}
#|eval: false
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
write_rds(F_tm.csr, "data/rds/F_tm_csr.rds")
```

```{r}
F_tm.csr <- read_rds("data/rds/F_tm_csr.rds")
```


```{r}
plot(F_tm.csr)
```

### 6.3 Analysing using K-Function

K-function measures the number of events found up to a given distance of any particular event.

Computing K-function estimate:

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted.

The test hypotheses are:

H0 = The distribution of childcare services at Choa Chu Kang are randomly distributed

H1 = The distribution of childcare services at Choa Chu Kang are not randomly distributed

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing:

```{r}
#|eval: false
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
write_rds(K_ck.csr, "data/rds/K_CK_csr.rds")
```

```{r}
K_ck.csr <- read_rds("data/rds/K_CK_csr.rds")
```


```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

Computing K-function estimate:

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted.

The test hypotheses are:

H0 = The distribution of childcare services at Tampines are randomly distributed

H1 = The distribution of childcare services at Tampines are not randomly distributed

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing:

```{r}
#|eval: false
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
write_rds(K_tm.csr, "data/rds/K_tm_csr.rds")
```

```{r}
K_tm.csr <- read_rds("data/rds/K_tm_csr.rds")
```


```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

### 6.4 Analysing using L-Function

Computing L-function estimation:

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted.

The test hypotheses are:

H0 = The distribution of childcare services at Choa Chu Kang are randomly distributed

H1 = The distribution of childcare services at Choa Chu Kang are not randomly distributed

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing:

```{r}
#|eval: false
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
write_rds(L_ck.csr, "data/rds/L_CK_csr.rds")
```

```{r}
L_ck.csr <- read_rds("data/rds/L_CK_csr.rds")
```


```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

Computing L-function estimate:

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted.

The test hypotheses are:

H0 = The distribution of childcare services at Tampines are randomly distributed

H1 = The distribution of childcare services at Tampines are not randomly distributed

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing:

```{r}
#|eval: false
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
write_rds(L_tm.csr, "data/rds/L_tm_csr.rds")
```

```{r}
L_tm.csr <- read_rds("data/rds/L_tm_csr.rds")
```


The code chunk below is used to plot the model output:

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
