---
title: "Hands-on Exercise 02A"
author: "Bhairavi Vairavelu"
date: "Sep 01 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
format:
  html:
    grid:
      body-width: 1300px
      sidebar-width: 50px
      margin-width: 350px
    toc: true
    toc-depth: 5
    toc-location: right
---

# 1st Order Spatial Point Patterns Analysis Methods

## 1. Overview

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. In this exercise, we aim to discover the spatial point processes of childcare centers in Singapore.

The specific questions we want to answer are the following: - Are childcare centers in Singapore randomly distributed throughout the country? - If the answer to above qns is No, the next logical qns is where are the locations with higher concentration of childcare centers?

## 2. Data

We will be using 3 data sets: - CHILDCARE, a point feature data providing both location and attribute information of childcare centres - MP14_SUBZONE_WEB_PL, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data - CostalOutline, a polygon feature data showing the national boundary of Singapore

## 3. Installing & Loading R Packages

We will be using 5 R packages -\> sf, spatstat, raster, maptools and tmap.

The code chunk below is used to install and launch the 5 R packages:

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse, maptools)
```

## 4. Spatial Data Wrangling

### 4.1 Importing Spatial Data

We will be using st_read() of sf package to import 3 geospatial data sets into R.

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```

Before we use these data sets, we need to ensure that they are projected in the same projection system.

```{r}
st_crs(childcare_sf)
```

```{r}
st_crs(sg_sf)
```

```{r}
st_crs(mpsz_sf)
```

Notice that except childcare_sf, both mpsz_sf and sg_sf don't have proper crs information. As such, we will be assigning the correct crs to both the mpsz_sf and sg_sf simple feature data frames.

```{r}
sg_sf3414 <- st_set_crs(sg_sf, 3414)
st_crs(sg_sf3414)
```

```{r}
mpsz_sf3414 <- st_set_crs(mpsz_sf, 3414)
st_crs(mpsz_sf3414)
```

### 4.2 Mapping Geospatial Data Sets

It is useful to plot a map to show the spatial patterns of each geospatial data frame.

```{r}
plot(sg_sf3414)
```

```{r}
plot(mpsz_sf3414)
```

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_sf()
```

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```

```{r}
tmap_mode('plot')
```

## 5. Geospatial Data Wrangling

### 5.1 Converting sf data frames to sp's Spatial class

The code chunk below uses as_Spatial() of sf package to convert the 3 geospatial data from simple feature data fram to sp's Spatial class:

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

The code chunk below can be used to display the 3 Spatial classes:

```{r}
list(childcare)
```

```{r}
list(mpsz)
```

```{r}
list(sg)
```

### 5.2 Converting Spatial class into generic sp format

spatstat requires analytical data in ppp object form.

There is no direct way to convert a Spatial class into ppp object. Hence, we need to convert the Spatial classes into Spatial objects first.

The code chunk below converts the Spatial classes into generic sp format:

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

We will use the code chunk below to display the properties:

```{r}
list(childcare_sp)
```

```{r}
list(sg_sp)
```

### 5.3 Converting generic sp format into spatstat's ppp format

We will use the as.ppp() function of spatstat to convert the spatial data into spatstat's ppp object format:

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

Let's plot the childcare_ppp and examine the difference:

```{r}
plot(childcare_ppp)
```

The code chunk below retrieves the summary statistics of the newly created ppp object:

```{r}
summary(childcare_ppp)
```

### 5.4 Handling Duplicated Points

We can use the code chunk below to check for duplication in a ppp object:

```{r}
any(duplicated(childcare_ppp))
```

We can use the code chunk below to count the number of co-incidence points:

```{r}
multiplicity(childcare_ppp)
```

We can use the code chunk below to find out how many locations have more than one point event:

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

We can use the code chunk below to view the locations of duplicate point events:

```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

```{r}
tmap_mode('plot')
```

Jittering - this will add a small perturbation to the duplicate points so that they do not occupy the same exact space.

The code chunk below implements the jittering approach:

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

The code chunk below helps to check if there are any duplicated points in this:

```{r}
any(duplicated(childcare_ppp_jit))
```

### 5.5 Creating owin object

The code chunk below is used to convert sg Spatial Polygon object into an owin object of spatstat:

```{r}
sg_owin <- as.owin(sg_sf)
```

The output object can be displayed using the plot() function:

```{r}
plot(sg_owin)
```

```{r}
summary(sg_owin)
```

### 5.6 Combining point events object & owin object

We will extract childcare events that are located within Singapore using the code chunk below:

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output object combines both the point and polygon feature into one ppp object:

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

## 6. 1st Order Spatial Point Patterns Analysis

We will focus on - Deriving kernel density estimation (KDE) layer for visualizing and exploring the intensity of point processes - Performing confirmatory spatial points patterns analysis by using nearest neighbour statistics

### 6.1 Kernel Density Estimation

The code chunk below computes a kernel density:

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

The plot() function of Base R is then used to display the kernel density derived:

```{r}
plot(kde_childcareSG_bw)
```

We can actually retrieve the bandwidth used to compute the kde layer:

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

In the code chunk below, we can convert the unit of measurement from meter to kilometer:

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
```

Now, we can rerun and plot the output kde map:

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

Notice that the only change from the previous plot is in the data values.

### 6.2 Working with different automatic bandwidth methods

There are 3 other spatstat functions that can be used to determine the bandwidth.

```{r}
bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```

The code chunk below will be used to compare the output of using bw.diggle and bw.ppl methods:

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

### 6.3 Working with different kernel methods

The code chunk below will be used to compute 3 more kernel density estimations by using these 3 kernel functions:

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

## 7. Fixed & Adaptive KDE

### 7.1 Computing KDE by using fixed bandwidth

The unit of measurement of object is in kilometer, hence the 600m is 0.6km:

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

### 7.2 Computing KDE by using adaptive bandwidth

Fixed bandwidth method is very sensitive to highly skewed distribution of spatial point patterns over geographical units.

One way to overcome this problem is by using adaptive bandwidth instead:

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

We can compare the fixed and adaptive kernel density estimation outputs:

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

### 7.3 Converting KDE output into grid object

We convert it so that it is suitable for mapping purposes:

```{r}
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)
spplot(gridded_kde_childcareSG_bw)
```

Next, we will convert the gridded kernel density object into Raster Layer object:

```{r}
kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
```

Let's take a look at the properties of the Raster Layer object:

```{r}
kde_childcareSG_bw_raster
```

Notice that the crs property is NA...

Hence, we will assign the CRS information:

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

### 7.4 Visualising the output in tmap

```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

### 7.5 Comparing Spatial Point Patterns using KDE

The code chunk below will be used to extract the target planning areas:

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

To plot the target planning areas:

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
```

```{r}
plot(tm, main = "Tampines")
```

```{r}
plot(ck, main = "Choa Chu Kang")
```

```{r}
plot(jw, main = "Jurong West")
```

We will convert these sf objects into owin objects:

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

We will use the code chunk below to extract childcare that is within the specific region:

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

We will use the rescale.ppp() function to transform the unit of measurement from metre to kilometre:

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

We will use the code chunk below to plot the 4 study areas and the locations of the childcare centers:

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

The code chunk below will be used to compute the KDE of these 4 planning areas:

```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```

For comparison purposes, we will use 250m as the bandwidth:

```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

## 8. Nearest Neighbour Analysis

We will perform the Clark-Evans test of aggregation for a spatial point pattern by using the clarkevans.test() of statspat.

The test hypotheses are:

H0 = The distribution of childcare services are randomly distributed

H1 = The distribution of childcare services are not randomly distributed

The 95% confidence interval will be used.

### 8.1 Clark & Events Test

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

The p-value is lesser than 0.05, hence we reject H0.

### 8.2 Choa Chu Kang Planning Area

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

The p-value is greater than 0.05, hence we fail to reject H0.

### 8.3 Tampines Planning Area

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

The p-value is lesser than 0.05, hence we reject H0.
