---
title: "Hands-on Exercise 01A"
author: "Bhairavi Vairavelu"
date: "Aug 25 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
format:
  html:
    grid:
      body-width: 1300px
      sidebar-width: 50px
      margin-width: 350px
    toc: true
    toc-depth: 5
    toc-location: right
---

# Geospatial Data Wrangling with R

## 1. Getting Started

The code chunk below uses p_load() of pacman package to check if sf and tidyverse packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(sf, tidyverse)
```

## 2. Importing Geospatial Data

### 2.1 Importing Polygon Feature Data in Shapefile Format

The code chunk below uses st_read() function of sf package to import a shapefile into R as a polygon feature data frame.

```{r}
mpsz = st_read(dsn = "data/geospatial",
               layer = "MP14_SUBZONE_WEB_PL")
```

### 2.2 Importing Polyline Feature Data in Shapefile Form

The code chunk below uses st_read() function of sf package to import a shapefile into R as line feature data frame.

```{r}
cyclingpath = st_read(dsn = "data/geospatial",
               layer = "CyclingPathGazette")
```

### 2.3 Importing GIS Data in kml Format

The code chunk below uses st_read() function of sf package to import a kml file into R.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

## 3. Checking Contents of Feature Data Frame

### 3.1 Working with st_geometry()

We can retrieve a geometry-list column by mpsz\$geom or mpsz\[\[1\]\]. But the more general way uses st_geometry() as shown in the code chunk below.

```{r}
st_geometry(mpsz)
```

### 3.2 Working with glimpse()

This is from dplyr, and as shown below, it reveals the data type of each field.

```{r}
glimpse(mpsz)
```

### 3.3 Working with head()

This helps to reveal complete information of a feature object.

```{r}
head(mpsz, n=5)
```

## 4. Plotting Geospatial Data

Looking at feature information is not enough. We are also interested to visualize the geospatial features. The plot() of R Graphic is helpful as shown in the code chunk below.

```{r}
plot(mpsz)
```

The default plot of an sf object is a multi-plot of all attributes. But we can also choose to plot only the geometery by using the code chunk below.

```{r}
plot(st_geometry(mpsz))
```

We could also choose to plot the sf object by using a specific attribute as shown in the code chunk below.

```{r}
plot(mpsz["PLN_AREA_N"])
```

## 5. Working with Projection

To perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system. The technical term for this process is called projection transformation.

### 5.1 Assigning EPSG Code

One common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing or wrongly assigned during the importing process.

```{r}
st_crs(mpsz)
```

Although mpsz data frame is projected in svy21, when we read the end of the print, it indicates that the EPSG is 9001. This is wrong since the EPSG code for svy21 should be 3414.

In order to assign the correct EPSG code to mpsz data frame, we will use the code chunk below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Let us check the CSR again by running the code chunk below.

```{r}
st_crs(mpsz3414)
```

### 5.2 Transforming Projection

It is common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis needs to use distance and/or area measurements.

For example, the preschool simple feature data frame is revealed to be a wgs84 coordinate system.

```{r}
st_crs(preschool)
```

Now, we will perform a projection transformation by using the code chunk below.

```{r}
preschool3414 <- st_transform(preschool, crs=3414)
```

Let us check the CSR again by running the code chunk below.

```{r}
st_crs(preschool3414)
```

## 6. Importing & Converting Aspatial Data

We call it aspatial data because it is not a geospatial data, but among the data fields, there are two fields that capture the x- and y- coordinates of the data points.

### 6.1 Importing Aspatial Data

Since the listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown in the code chunk below. the output R object is called listings, and it is a tibble data frame.

```{r}
listings <- read_csv("data/aspatial/listings.csv/listings.csv")
```

After importing the file, it is important for us to examine if the data file has been imported correctly. The code chunk below shows list() of Base R instead of glimpse() to do the job.

```{r}
list(listings)
```

### 6.2 Creating Simple Feature Data Frame from Aspatial Data Frame

The code chunk below converts listing data frame into a simple feature data frame by using the st_as_sf() of sf packages.

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Things to note: - coords argument requires us to provide the column name of the x-coordinates first, followed by the column name of the y-coordinates - crs argument requires us to provide the coordinates system in epsg format. EPSG:4326 is wsg84 Geogrpahic Coordinate System and EPSG:3414 is Singapore SVY21 Projected Coordinate System. - %\>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.

Let us examine the content of this newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

## 7. Geoprocessing with sf package

The sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

### 7.1 Buffering

Scenario:

The authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 meters of reserved land on both sides of the current cycling path. You are tasked to determine the extend of the land that needs to be acquired and their total area.

Solution:

The st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths.

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved.

```{r}
sum(buffer_cycling$AREA)
```

### 7.2 Point-in-Polygon Count

Scenario:

A pre-school service group wants to find out the number of pre-schools in each Planning Subzone.

Solution:

The code chunk below performs 2 operations at one go. First, we identify the pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each Planning Subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

We can check the summary statistics of the newly derived field by using summary() as shown in the code chunk below

```{r}
summary(mpsz3414$`PreSch Count`)
```

to list the Planning Subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

The code chunk bwloe uses st_area() of sf package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Then, we use the mutate() of dplyr package to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## 8. Exploratory Data Analysis (EDA)

We will be using ggplot2 functions to create functional yet truthful statistical graphs for EDA purposes.

First, we will plot a histogram to reveal the distribution of pre-school density.

```{r}
hist(mpsz3414$`PreSch Density`)
```

In the code chunk below, appropriate ggplot2 functions will be used.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

We can also use ggplot2 to plot a scatter plot showing the relationship between pre-school density and pre-school count.

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
