---
title: "Hands-on Exercise 01B"
author: "Bhairavi Vairavelu"
date: "Aug 25 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# Choropleth Mapping with R

## 1. Getting Started

The key R package we will use is tmap package in R. We will also use 4 other packages: - readr for importing delimited text file - tidyr for tidying data - dplyr for wrangling data - sf for handling geospatial data

The code chunk below will be used to install and load these packages.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## 2. Importing Data into R

The code chunk below uses st_read() function of sf package to import a shapefile into R.

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

We can examine the content of mpsz by using the code chunk below.

```{r}
mpsz
```

Next, we will import another file and save it into an R data frame called popdata. This will be performed using read_csv() function of readr package as shown in the code chunk below.

```{r}
popdata <- read_csv("data/aspatial/respopagesexfa2011to2020.csv")
```

## 3. Data Preparation

Before we prepare a thematic map, we need to prepare the data table with year 2020 values. - YOUNG: age group 0 to 4 until age group 20 to 24, - ECONOMY ACTIVE: age group 25-29 until age group 60-64, - AGED: age group 65 and above, - TOTAL: all age group, and - DEPENDENCY: the ratio between young and aged against economy active group

### 3.1 Data Wrangling

We will use two functions for data wrangling: pivot_wider() of tidyr package, and mutate(), filter(), group_by() and select() of dplyr package.

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

### 3.2 Joining Attribute & Geospatial Data

Before we perform the georelational join, we need to convert the values in PA and SZ fields to uppercase.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

We will use a left_join of dplyr to join the geographical data and attribute table using Planning Subzone name as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## 4. Choropleth Mapping Geospatial Data

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.

Two approaches can be used: - Plotting a thematic map quickly by using qtm(). - Plotting highly customizable thematic map by using tmap elements.

### 4.1 Plotting using qtm()

This is the easiest and quickest way to draw a choropleth map using tmap. It is concise and provides a good default visualization.

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

Note: - tmap_mode() with “plot” option is used to produce a static map. For interactive mode, the “view” option should be used. - fill argument is used to map the attribute

### 4.2 Using tmap's elements

Disadvantage is tmap is that it makes aesthetics of individual layers hard to control. To draw a high quality cartographic choropleth map, tmap's drawing elements must be used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

### 4.3 Drawing a Base Map

In the code chunk below, we use tm_shape() to define the input data and tm_polygons() to draw the Planning Subzone polygons.

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

### 4.4 Drawing using tm_polygons()

To draw based on a selected variable by Planning Subzone, we need to assign the target variable in tm_polygons().

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

Note: - Default interval binning used to draw the choropleth map is called “pretty” - Default colour scheme used is YlOrRd of ColorBrewer - Missing value will be shaded in grey by default

### 4.5 Using tm_fill() and tm_border()

Actually, tm_polygons() is a wrapper of tm_fill() and tm_border(). tm_fill() helps shade the polygons by using the default color scheme, and tm_border() adds the borders of the shapefile onto the choropleth map.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

To add the boundary of Planning Subzone, tm_border() will be used as shown in the code chunk below.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

## 5. Data Classification Methods

Aim of classification is to take a larger number of observations and group them into data ranges or classes.

tmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.

### 5.1 Built-In Methods

The code chunk below shows a quantile data classification that uses 5 classes.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

In the code chunk below, the equal data classification method is used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

### 5.2 Custom Breaks

For all built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to tm_fill().

tmap breaks include a min and max. In order to end up with n categories, n+1 arguments must be specified in the breaks option (in increasing order).

The code chunk below will be used to compute and display the descriptive statistics of the DEPENDENCY field.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

With reference to the results aboce, we will set our breakpoints using the code chunk below.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

## 6. Colour Scheme

tmap supports colour ramps - either defined by user or a set of predefined colour ramps from the RColorBrewer package.

To change the color, we assign the preferred color to palette argument of tm_fill().

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

To reverse the color shading, add a "-" prefix.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

## 7. Map Layouts

Refers to the combination of all map elements into a cohesive map.

### 7.1 Map Legend

There are several options to change the placement, format and appearance of the legend.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

### 7.2 Map Style

There are different layout setting for map styles.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

### 7.3 Cartographic Furniture

We can also draw other map furniture like compass, scale bar and grid lines.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

## 8. Multiple Small Choropleth Maps

Also referred to as facet maps - they are many maps that are arranged side-by-side, and sometimes stacked vertically. These help enable visualization of how spatial relationships change with respect to another variable, such as time.

In tmap, small multiple maps can be plotted in three ways: - By assigning multiple values to at least one of the aesthetic arguments - By defining a group-by variable in tm_facets() - By creating multiple stand-alone maps with tmap_arrange()

### 8.1 By assigning multiple values to at least one of the aesthetic arguments

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

Another option:

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

### 8.2 By defining a group-by variable

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

### 8.3 By creating multiple stand-alone maps

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

## 9. Mapping Spatial Object Meeting a Selection Criterion

We can also use selection function to map spatial objects meeting the selection criterion.

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

