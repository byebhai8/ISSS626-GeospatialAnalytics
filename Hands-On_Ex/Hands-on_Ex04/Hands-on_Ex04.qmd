---
title: "Hands-on Exercise 04"
author: "Bhairavi Vairavelu"
date: "Sep 14 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# Spatial Weights & Applications

## 1. Overview

The aim of this exercise is to:

-   Import geospatial data using appropriate functions of sf package
-   Import csv file using appropriate functions of readr package
-   Perform relational join using appropriate functions of dplyr package
-   Compute spatial weights using appropriate functions of spdep package
-   Calculate spatially lagged variables using appropriate functions of spdep package

## 2. Study Area & Data

We will be using two data sets in this exercise

-   Hunan county boundary layer, which is a geospatial data set in ESRI shapefile format

-   Hunan_2012.csv, which is a csv file containing selected Hunan’s local development indicators in 2012

### 2.1 Getting Started

Before we proceed, let's ensure that spdep, sf, tmap and tidyverse packages of R are installed and launched in R.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## 3. Getting the Data

We will be importing the geospatial data which is in ESRI shapefile format, as well as the associated attribute table which is in csv format, into R.

### 3.1 Importing shapefile

The code chunk below uses st_read() of sf package to import Hunan shapefile into R. This imported shapefile will be a simple feature object of sf.

```{r}
#|eval: false
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
write_rds(hunan, "data/rds/hunan.rds")
```

```{r}
hunan <- read_rds("data/rds/hunan.rds")
```

### 3.2 Importing csv file

Next, we will import the Hunan_2012.csv into R by using read_csv)_ of readr package. The output is a R dataframe class.

```{r}
#|eval: false
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
write_rds(hunan2012, "data/rds/hunan2012.rds")
```

```{r}
hunan2012 <- read_rds("data/rds/hunan2012.rds")
```

### 3.3 Performing relational joins

The code chunk below will be used to update the attribute table of hunan's SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This will be performed using the left_join() of dplyr package.

```{r}
#|eval: false
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
write_rds(hunan, "data/rds/hunan2.rds")
```

```{r}
hunan <- read_rds("data/rds/hunan2.rds")
```

## 4. Visualizing Regional Development Indicator

We will be preparing a basemap and a choropleth map showing the distribution of GDPPC2012 by using qtm() of tmap package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## 5. Computing Contiguity Spatial Weights

We will be using poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.

### 5.1 Computing (QUEEN) Contiguity

The code chunk below is used to compute Queen contiguity weight matrix.

```{r}
#|eval: false
wm_q <- poly2nb(hunan, queen=TRUE)
write_rds(wm_q, "data/rds/wm_q.rds")
```

```{r}
wm_q <- read_rds("data/rds/wm_q.rds")
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. Also, there are two area units with only one neighbour.

wm_q helps to list all neighboring polygons for each polygon in our polygon object. We will use the code chunk below to see the neighbors for the first polygon in the object.

```{r}
wm_q[[1]]
```

The above shows that Polygon 1 has 5 neighbours. These numbers represent the polygon IDs which are stored in hunan SpatialPolygonsDataFrame class.

We will use the code chunk below to retrieve the county name of Polygon ID = 1.

```{r}
hunan$County[1]
```

The above shows that Polygon ID=1 is Anxiang county.

We will use the code chunk below to reveal the county names of the five neighbouring polygons.

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

We will use the code chunk below to retrieve the GDPPC of these five counties.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

The printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.

We will use the code chunk below to display the complete weight matrix.

```{r}
# str(wm_q)
```

### 5.2 Creating (ROOK) Contiguity

The code chunk below is used to compute Rook contiguity weight matrix.

```{r}
#|eval: false
wm_r <- poly2nb(hunan, queen=FALSE)
write_rds(wm_r, "data/rds/wm_r.rds")
```

```{r}
wm_r <- read_rds("data/rds/wm_r.rds")
summary(wm_r)
```

The summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. Also, there are two area units with only one neighbour.

### 5.3 Visualizing Contiguity Weights

To get our longitude values that we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We will do the same for latitude values.

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now, since we have both the longitude and latitude, we will use cbind to put longitude and latitude into the same object.

```{r}
#|eval: false
coords <- cbind(longitude, latitude)
write_rds(coords, "data/rds/coords.rds")
```

```{r}
coords <- read_rds("data/rds/coords.rds")
```

We will use the code chunk below to check the first few observations to see if things are formatted correctly.

```{r}
head(coords)
```

#### 5.3.1 Plotting Queen Contiguity

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### 5.3.2 Plotting Rook Contiguity

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### 5.3.3. Plotting Both Contiguities

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## 6. Computing Distance-based Neighbours

We will be using dnearneigh() of spdep package to derive distance-baed weight matrices.

### 6.1 Determininng cut-off distance

We will need to determine the upper limit for distance band:

```{r}
#|eval: false
k1 <- knn2nb(knearneigh(coords))
write_rds(k1, "data/rds/k1.rds")
```

```{r}
k1 <- read_rds("data/rds/k1.rds")
```

```{r}
#|eval: false
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
write_rds(k1dists, "data/rds/k1dists.rds")
```

```{r}
k1dists <- read_rds("data/rds/k1dists.rds")
```


```{r}
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

### 6.2 Computing fixed distance weight matrix

We will usednearneigh() as shown in the code chunk below to compute the distance weight matrix.

```{r}
#|eval: false
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
write_rds(wm_d62, "data/rds/wm_d62.rds")
```

```{r}
wm_d62 <- read_rds("data/rds/wm_d62.rds")
```

```{r}
wm_d62
```

The above summary report shows that on average, each unity has approx. 3.68 neighbouring units - likely that some have 3, while others have 4, hence we get this decimal output.

Next, we will be using the str() to display the content of wm_d62 weight matrix.

```{r}
# str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine table() and card() of spdep.

```{r}
# table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### 6.2.1 Plotting fixed distance weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

We can also plot both of them next to each other by using the code chunk below.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

### 6.3 Computing adaptive distancee weight matrix

We can control the number of neighbours directly by using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
#|eval: false
knn6 <- knn2nb(knearneigh(coords, k=6))
write_rds(knn6, "data/rds/knn6.rds")
```

```{r}
knn6 <- read_rds("data/rds/knn6.rds")
```

```{r}
knn6
```

Similarly, we can display the content of the matrix by using str():

```{r}
# str(knn6)
```

#### 6.3.1 Plotting distance based neighbours

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## 7. Weights based on IDW

We will derive a spatial weight matrix based on the Inversed Distance method.

First, we need to compute the distances between areas by using nbdlists() of spdep.

```{r}
#|eval: false
dist <- nbdists(wm_q, coords, longlat = TRUE)
write_rds(dist, "data/rds/dist.rds")
```

```{r}
dist <- read_rds("data/rds/dist.rds")
```

```{r}
#|eval: false
ids <- lapply(dist, function(x) 1/(x))
write_rds(ids, "data/rds/ids.rds")
```

```{r}
ids <- read_rds("data/rds/ids.rds")
```

```{r}
# ids
```

## 8. Row-standardized Weights Matrix

Next, we need to assign weights to each neighboring polygon. 

```{r}
#|eval: false
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
write_rds(rswm_q, "data/rds/rswm_q.rds")
```

```{r}
rswm_q <- read_rds("data/rds/rswm_q.rds")
```

```{r}
rswm_q
```

To see the weight of the first polygon’s eight neighbors type:

```{r}
rswm_q$weights[10]
```

We can also derive a row standardised distance weight matrix by using the code chunk below.

```{r}
#|eval: false
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
write_rds(rswm_ids, "data/rds/rswm_ids.rds")
```

```{r}
rswm_ids <- read_rds("data/rds/rswm_ids.rds")
```

```{r}
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## 9. Application of Spatial Weight Matrix

We will be creating four different spatial lagged variables:

-   Spatial lag with row-standardized weights

-   Spatial lag as a sum of neighbouring values

-   Spatial window average

-   Spatial window sum

### 9.1 Spatial lag with row-standardized weights

We will compute the average neighbor GDPPC value for each polygon. 

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

We can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The following table shows the average neighboring income values (stored in the Inc.lag object) for each county.

```{r}
head(hunan)
```

We will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### 9.2 Spatial lag as a sum of neighbouring values

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. 

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

We can use lag.listw to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

We can examine the result by using the code chunk below.

```{r}
# lag_sum
```

We will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.

```{r}
hunan <- left_join(hunan, lag.res)
```

We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### 9.3 Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element. 

```{r}
wm_qs <- include.self(wm_q)
```

Let's review the neighbour list of area [1] by using the code chunk below.

```{r}
wm_qs[[1]]
```

We can obtain weights using nb2listw().

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

We need to create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

We will convert the lag variable listw object into a data.frame by using as.data.frame().

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

The code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

To compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

Lastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### 9.4 Spatial window sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

We will assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

We will use nb2listw() and glist() to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With our new weight structure, we can compute the lag variable with lag.listw().

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

We will convert the lag variable listw object into a data.frame by using as.data.frame().

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

The code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

To compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Lastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```

