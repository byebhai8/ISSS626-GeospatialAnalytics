---
title: "Hands-on Exercise 06"
author: "Bhairavi Vairavelu"
date: "Sep 29 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# Spatially Constrained Clustering Techniques

## 1. Overview

We will learn how to delineate homogeneous region by using geographically referenced multivariate data. There are 2 major analysis:

-   hierarchical cluster analysis

-   spatially constrained cluster analysis

## 2. Getting Started

### 2.1 Analytical Question

We are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple ICT measures, namely - Radio, Television, Land Line Phone, Mobile Phone, Computer, and Internet at Home.

### 2.2 Data

Two data sets will be used:

-   Myanmar Township Boundary Data, in shapefile format, capturing polygon features

-   2014 Myanmar Population and Housing Census Myanmar, in csv file at township level

We will install and load the R packages using the code chunk below:

```{r}
pacman::p_load(spdep, tmap, sf, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, GGally)
```

## 3. Data Import & Preparation

### 3.1 Importing Geospatial Data

```{r}
#|eval: false
shan_sf <- st_read(dsn = "data/geospatial", 
                   layer = "myanmar_township_boundaries") %>%
  filter(ST %in% c("Shan (East)", "Shan (North)", "Shan (South)")) %>%
  select(c(2:7))
write_rds(shan_sf, "data/rds/shan_sf.rds")
```

To read in the rds:

```{r}
shan_sf <- read_rds("data/rds/shan_sf.rds")
```

```{r}
shan_sf
```

We will use glimpse() to reveal the data type of it's fields:

```{r}
glimpse(shan_sf)
```

### 3.2 Importing Aspatial Data

```{r}
#|eval: false
ict <- read_csv ("data/aspatial/Shan-ICT.csv")
write_rds(ict, "data/rds/ict.rds")
```

To read in the rds:

```{r}
ict <- read_rds("data/rds/ict.rds")
```

To reveal summary statistics:

```{r}
summary(ict)
```

### 3.3 Derive New Variables

We will derive the penetration rate of each ICT variable.

```{r}
#|eval: false
ict_derived <- ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%
  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%
  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%
  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%
  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%
  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%
  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,
         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,
         `TT_HOUSEHOLDS`=`Total households`,
         `RADIO`=`Radio`, `TV`=`Television`, 
         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,
         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) 
write_rds(ict_derived, "data/rds/ict_derived.rds")
```

To read in the rds:

```{r}
ict_derived <- read_rds("data/rds/ict_derived.rds")
```

To review summary statistics:

```{r}
summary(ict_derived)
```

## 4. Exploratory Data Analysis

### 4.1 Using Statistical Graphics

Histogram is used to identify the overall distribution of the data values.

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")
```

Boxplot is used to detect if there are outliers.

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```

Distribution of the newly derived variables:

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")
```

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO_PR`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```

Creating individual histograms + using ggarrange() of ggpubr to group these histograms together:

```{r}
radio <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

tv <- ggplot(data=ict_derived, 
             aes(x= `TV_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

llphone <- ggplot(data=ict_derived, 
             aes(x= `LLPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

mphone <- ggplot(data=ict_derived, 
             aes(x= `MPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

computer <- ggplot(data=ict_derived, 
             aes(x= `COMPUTER_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

internet <- ggplot(data=ict_derived, 
             aes(x= `INTERNET_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

ggarrange(radio, tv, llphone, mphone, computer, internet, 
          ncol = 3, 
          nrow = 2)
```

### 4.2 Using Choropleth Map

Joining geospatial data with aspatial data:

```{r}
#|eval: false
shan_joined <- left_join(shan_sf, 
                     ict_derived, by=c("TS_PCODE"="TS_PCODE"))
  
write_rds(shan_joined, "data/rds/shan_joined.rds")
```

To read in the rds:

```{r}
shan_joined <- read_rds("data/rds/shan_joined.rds")
```

Preparing choropleth map:

```{r}
qtm(shan_joined, "RADIO_PR")
```

Creating two choropleth maps, one for total number of households, one for total number of households with Radio:

```{r}
TT_HOUSEHOLDS.map <- tm_shape(shan_joined) + 
  tm_fill(col = "TT_HOUSEHOLDS",
          n = 5,
          style = "jenks", 
          title = "Total households") + 
  tm_borders(alpha = 0.5) 

RADIO.map <- tm_shape(shan_joined) + 
  tm_fill(col = "RADIO",
          n = 5,
          style = "jenks",
          title = "Number Radio ") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,
             asp=NA, ncol=2)
```

Plotting choropleth maps to show distribution of total number of households and Radio penetration rate:

```{r}
tm_shape(shan_joined) +
    tm_polygons(c("TT_HOUSEHOLDS", "RADIO_PR"),
                style="jenks") +
    tm_facets(sync = TRUE, ncol = 2) +
  tm_legend(legend.position = c("right", "bottom"))+
  tm_layout(outer.margins=0, asp=0)
```

## 5. Correlation Analysis

We will use corrplot.mixed() of corrplot package to visualize and analyse the correlation of input variables:

```{r}
cluster_vars.cor = cor(ict_derived[,12:17])
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

## 6. Hierarchy Cluster Analysis

### 6.1 Clustering variables

This code chunk is used to extract the clustering variables:

```{r}
cluster_vars <- shan_joined %>%
  st_set_geometry(NULL) %>%
  select("TS.x", "RADIO_PR", "TV_PR", "LLPHONE_PR", "MPHONE_PR", "COMPUTER_PR")
head(cluster_vars,10)
```

To change rows by township name instead of row number:

```{r}
row.names(cluster_vars) <- cluster_vars$"TS.x"
head(cluster_vars,10)
```

To delete the TS.x field:

```{r}
shan_ict <- select(cluster_vars, c(2:6))
head(shan_ict, 10)
```

### 6.2 Data Standardization

Min-Max Standardization:

```{r}
shan_ict.std <- normalize(shan_ict)
summary(shan_ict.std)
```

Z-score Standardization:

```{r}
shan_ict.z <- scale(shan_ict)
describe(shan_ict.z)
```

Note: this should only be used if we would assume all variables come from some normal distribution.

### 6.3 Visualizing Standardized Clustering Variables

To plot the scaled Radio_PR field:

```{r}
r <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Raw values without standardisation")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(data=shan_ict_s_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(data=shan_ict_z_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```

```{r}
r <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Raw values without standardisation")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(data=shan_ict_s_df, 
       aes(x=`RADIO_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Min-Max Standardisation")

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(data=shan_ict_z_df, 
       aes(x=`RADIO_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```

### 6.4 Proximity Matrix

To compute proximity matrix using euclidean method:

```{r}
proxmat <- dist(shan_ict, method = 'euclidean')
proxmat
```

### 6.5 Hierarchical Clustering

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
plot(hclust_ward, cex = 0.6)
```

### 6.6 Selecting Optimal Clustering Algorithm

This code chunk will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms:

```{r}
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(shan_ict, method = x)$ac
}

map_dbl(m, ac)
```

### 6.7 Determining Optimal Clusters

Gap Statistic Method:

```{r}
set.seed(12345)
gap_stat <- clusGap(shan_ict, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)
# Print the result
print(gap_stat, method = "firstmax")
```

Visualize using fviz_gap_stat() of factoextra:

```{r}
fviz_gap_stat(gap_stat)
```

### 6.8 Interpreting Dendrograms

To draw the dendrograms:

```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, 
            k = 6, 
            border = 2:5)
```

### 6.9 Visually-driven Hierarchical Clustering Analysis

Transforming data frame into a matrix:

```{r}
shan_ict_mat <- data.matrix(shan_ict)
```

Plotting interactive cluster heatmap using heatmaply():

```{r}
heatmaply(normalize(shan_ict_mat),
          Colv=NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Blues,
          k_row = 6,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Geographic Segmentation of Shan State by ICT indicators",
          xlab = "ICT Indicators",
          ylab = "Townships of Shan State"
          )
```

### 6.10 Mapping Formed Clusters

To derive a 6-cluster model:

```{r}
groups <- as.factor(cutree(hclust_ward, k=6))
```

To append the groups object onto shan_joined:

```{r}
shan_sf_cluster <- cbind(shan_joined, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)
```

To plot choropleth map:

```{r}
qtm(shan_sf_cluster, "CLUSTER")
```

## 7. SKATER Approach

This is for spatially constrained clustering.

Converting into SpatialPolygonsDataFrame:

```{r}
shan_sp <- as_Spatial(shan_joined)
```

Computing Neighbour list:

```{r}
shan.nb <- poly2nb(shan_sp)
summary(shan.nb)
```

```{r}
coords <- st_coordinates(
  st_centroid(st_geometry(shan_sf)))

plot(st_geometry(shan_sf), 
     border=grey(.5))

plot(shan.nb,
     coords, 
     col="blue", 
     add=TRUE)
```

Computing Minimum Spanning Tree:

```{r}
lcosts <- nbcosts(shan.nb, shan_ict)

shan.w <- nb2listw(shan.nb, 
                   lcosts, 
                   style="B")

summary(shan.w)
```

```{r}
shan.mst <- mstree(shan.w)

class(shan.mst)
```

```{r}
dim(shan.mst)
```

```{r}
head(shan.mst)
```

```{r}
plot(st_geometry(shan_joined), 
                 border=gray(.5))

plot.mst(shan.mst, 
         coords, 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

Computing spatially constrained clusters using SKATER method:

```{r}
clust6 <- spdep::skater(edges = shan.mst[,1:2], 
                 data = shan_ict, 
                 method = "euclidean", 
                 ncuts = 5)

str(clust6)
```

Checking cluster assignment:

```{r}
ccs6 <- clust6$groups
ccs6
```

```{r}
table(ccs6)
```

```{r}
plot(st_geometry(shan_joined), 
     border=gray(.5))

plot(clust6, 
     coords, 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```

Visualizing clusters in choropleth map:

```{r}
groups_mat <- as.matrix(clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "SP_CLUSTER")
```

To place both the hierarchical clustering and spatially constrained hierarchical clustering maps side by side:

```{r}
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) 

shclust.map <- qtm(shan_sf_spatialcluster,
                   "SP_CLUSTER") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```

## 8. ClustGeo Method

To perform non-spatially constrained hierarchical clustering:

```{r}
nongeo_cluster <- hclustgeo(proxmat)
plot(nongeo_cluster, cex = 0.5)
rect.hclust(nongeo_cluster, 
            k = 6, 
            border = 2:5)
```

Mapping formed clusters:

```{r}
groups <- as.factor(cutree(nongeo_cluster, k=6))

shan_sf_ngeo_cluster <- cbind(shan_joined, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)

qtm(shan_sf_ngeo_cluster, "CLUSTER")
```

Spatially constrained hierarchical clustering:

```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)

cr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)
```

```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.2)

groups <- as.factor(cutree(clustG, k=6))

shan_sf_Gcluster <- cbind(shan_joined, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)

qtm(shan_sf_Gcluster, "CLUSTER")
```

## 9. Visual Interpretation of Clusters

Visualizing individual clustering variable:

```{r}
ggplot(data = shan_sf_ngeo_cluster,
       aes(x = CLUSTER, y = RADIO_PR)) +
  geom_boxplot()
```

Multivariate visualization:

```{r}
ggparcoord(data = shan_sf_ngeo_cluster, 
           columns = c(17:21), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ CLUSTER) + 
  theme(axis.text.x = element_text(angle = 30))
```

To derive mean values of the clustering variables:

```{r}
shan_sf_ngeo_cluster %>% 
  st_set_geometry(NULL) %>%
  group_by(CLUSTER) %>%
  summarise(mean_RADIO_PR = mean(RADIO_PR),
            mean_TV_PR = mean(TV_PR),
            mean_LLPHONE_PR = mean(LLPHONE_PR),
            mean_MPHONE_PR = mean(MPHONE_PR),
            mean_COMPUTER_PR = mean(COMPUTER_PR))
```
