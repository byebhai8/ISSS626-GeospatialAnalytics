---
title: "Hands-on Exercise 10A"
author: "Bhairavi Vairavelu"
date: "Nov 02 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# Processing & Visualizing Flow Data

## 1.0 Overview

In this exercise, we will build an OD matrix by using Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA Data Mall.

## 2.0 Getting Started

For this exercise, we will use five r packages:

-   sf, fo importing, integrating, processing and transforming geospatial data

-   tidyverse, for importing, integrating, wrangling and visualizing data

-   tmap, for creating elegant thematic maps

-   stplanr, for solving common problems in transport planning and modelling

-   DT, which provides an R interface to the DataTables javascript library

```{r}
pacman::p_load(tmap, sf, DT, stplanr, tidyverse)
```

## 3.0 Preparing the Flow Data

### 3.1 Importing the OD data

First, we will import the Passenger Volume by Origin Destination Bus Stops data set:

```{r}
#|eval: false
odbus <- read_csv("data/aspatial/origin_destination_bus_202210.csv")
write_rds(odbus, "data/rds/odbus.rds")
```

To read in the saved rds file:

```{r}
odbus <- read_rds("data/rds/odbus.rds")
```

We can display the odbus tibble data table by using the code chunk below:

```{r}
glimpse(odbus)
```

The code chunk below is used to convert the numeric data type fields into character data type fields:

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE) 
```

### 3.2 Extracting the study data

We will extract commuting flows on weekday and between 6 and 9 o'clock:

```{r}
odbus6_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

The table below shows the contents of odbus6_9:

```{r}
datatable(odbus6_9)
```

We will save the output in rds:

```{r}
#|eval: false
write_rds(odbus6_9, "data/rds/odbus6_9.rds")
```

To read in the saved rds file:

```{r}
odbus6_9 <- read_rds("data/rds/odbus6_9.rds")
```

## 4.0 Working with Geospatial data

Two geospatial data will be used in this exercise, and they are both in ESRI shapefile format.

### 4.1 Importing geospatial data

We will import the two geospatial data first, and save them in rds:

```{r}
#|eval: false
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
write_rds(busstop, "data/rds/busstop.rds")
```

```{r}
#|eval: false
mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
write_rds(mpsz, "data/rds/mpsz.rds")
```

To read in the saved rds files:

```{r}
busstop <- read_rds("data/rds/busstop.rds")
mpsz <- read_rds("data/rds/mpsz.rds")
```

## 5.0 Geospatial data wrangling

### 5.1 Combining busstop and mpsz

The code chunk below populates the planning subzone code of mpsz sf data frame into busstop sf data frame.

```{r}
#|eval: false
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.rds")
```

To read in the saved rds files:

```{r}
busstop_mpsz <- read_rds("data/rds/busstop_mpsz.rds")
```

```{r}
datatable(busstop_mpsz)
```

Next, we will append the planning subzone code from busstop_mpsz data frame into odbus6_9 data frame.

```{r}
od_data <- left_join(odbus6_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

It is good practice for us to check for duplicating records:

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

If duplicated records are found, the code chunk below will be used to retain the unique records:

```{r}
od_data <- unique(od_data)
```

It is good to check and confirm if the duplicating records issue has been addressed:

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

Next, we will update od_data with the planning subzone codes.

```{r}
od_data <- left_join(od_data , busstop_mpsz,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 
```

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

```{r}
od_data <- unique(od_data)
```

```{r}
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
```

```{r}
#|eval: false
write_rds(od_data, "data/rds/od_data_fii.rds")
```

To read in the saved rds file:

```{r}
od_data_fii <- read_rds("data/rds/od_data_fii.rds")
```

## 6.0 Visualising Spatial Interaction

We will prepare a desire line by using stplanr package.

### 6.1 Removing intra-zonal flows

The code chunk below is used to remove the intra-zonal flows:

```{r}
#|eval: false
od_data_fij <- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]
write_rds(od_data_fij, "data/rds/od_data_fij.rds")
```

To read in the saved rds file:

```{r}
od_data_fij <- read_rds("data/rds/od_data_fij.rds")
```

### 6.2 Creating desire lines

In the code chunk below, od2line() of stplanr package is used to create the desire lines:

```{r}
#|eval: false
flowLine <- od2line(flow = od_data_fij, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
write_rds(flowLine, "data/rds/flowLine.rds")
```

To read in the saved rds file:

```{r}
flowLine <- read_rds("data/rds/flowLine.rds")
```

### 6.3 Visualizing the desire lines

The code chunk below is used to visualize the resulting desire lines:

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

When the flow data is messy and highly skewed like the one above, it might be better to focus on selected flows. For example, we only want to focus on flows greater than or equal to 5000 as shown below:

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(MORNING_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

x
