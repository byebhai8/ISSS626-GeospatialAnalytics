---
title: "Hands-on Exercise 05A"
author: "Bhairavi Vairavelu"
date: "Sep 29 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# Global Measures of Spatial Autocorrelation

## 1. Overview

We will be computing Global Measures of Spatial Autocorrelation (GMSA) by using spdep package.

## 2. Getting Started

### 2.1 Analytical Question

Our task is to apply appropriate spatial statistical methods to discover if development are evenly distributed geographically. If the answer is no, our next question will be "is there a sign of spatial clustering". If the answer is yes, our next question will be "where are these clusters".

### 2.2 Study Area & Data

In our exercise, we are interested to examine the spatial patterns of a selected development indicator of Hunan Province in People's Republic of China.

Two datasets will be used

-   Hunan province administrative boundary layer at country level, a shapefile

-   Hunan's local development indicators in 2012, a csv file

### 2.3 Analytical Tools

Before we get started, we need to ensure that spdep, sf, tmap and tidyverse packages are installed and loaded into R. The code chunk below will help with this:

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## 3. Getting Data into R Environment

### 3.1 Import shapefile into R

The code chunk below uses st_read() of sf package to import the Hunan shapefile into R.

```{r}
#|eval: false
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
write_rds(hunan, "data/rds/hunan.rds")
```

This code chunk will read the saved rds into R environment:

```{r}
hunan <- read_rds("data/rds/hunan.rds")
```

### 3.2 Import csv file into R

Next, we will import Hunan_2012.csv into R using read_csv() of readr package.

```{r}
#|eval: false
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
write_rds(hunan2012, "data/rds/hunan2012.rds")
```

This code chunk will read the saved rds into R environment:

```{r}
hunan2012 <- read_rds("data/rds/hunan2012.rds")
```

### 3.3 Performing Relational Join

The code chunk below will be used to update the attribute table of hunan's SpatialPolygonsDataFrame with the attribute fields of hunan2012 data frame. This is performed using the left_join() of dplyr package.

```{r}
#|eval: false
hunan_joined <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
write_rds(hunan_joined, "data/rds/hunan_joined.rds")
```

This code chunk will read the saved rds into R environment:

```{r}
hunan_joined <- read_rds("data/rds/hunan_joined.rds")
```

### 3.4 Visualizing Regional Development Indicator

We will prepare a basemap and choropleth map to show the distribution of GDPPC 2012 by using qtm() of tmap package.

```{r}
equal <- tm_shape(hunan_joined) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan_joined) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## 4. Global Measures of Spatial Autocorrelation

### 4.1 Computing Contiguity Spatial Weights

Before we compute the global spatial autocorrelation statistics, we need to construct the spatial weights of the study area. These weights are used to define the neighborhood relationships between geographical units in the study area.

In this code chunk, poly2nb() of spdep is used to compute the Queen contiguity weight matrices for the study area.

```{r}
wm_q <- poly2nb(hunan_joined, 
                queen=TRUE)
summary(wm_q)
```

### 4.2 Row-standardized weights matrix

Next, we will assign weights to each neighboring polygon.

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

## 5. Moran's I statistics

### 5.1 Moran's I test

The code chunk below performs the Moran's I statistical test using moran.test() of spdep.

```{r}
moran.test(hunan_joined$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

### 5.2 Computing Monte Carlo Moran's I

The code chunk below performs permutation test for Moran's I statistical test by using moran.mc() of spdep.

```{r}
set.seed(1234)
bperm= moran.mc(hunan_joined$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

### 5.3 Visualizing Monte Carlo Moran's I

We can plot the distribution of the statistical values as a histogram by using the code chunk below.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

## 6. Geary's C statistics

### 6.1 Geart's C test

The code chunk below performs Geary's C test for spatial autocorrelation by using geary.test() of spdep.

```{r}
geary.test(hunan_joined$GDPPC, listw=rswm_q)
```

### 6.2 Computing Monte Carlo Geary's C

The code chunk below performs permutation test for Geary's C by using geary.mc() of spdep.

```{r}
set.seed(1234)
bperm=geary.mc(hunan_joined$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

### 6.3 Visualizing Monte Carlo Geary's C

We will plot a histogram to reveal the distribution of the simulation values by using the code chunk below.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

## 7. Spatial Correlogram

### 7.1 Moran's I correlogram

In the code chunk below, sp.correlogram() of spdep is used to compute a 6-lag spatial correlogram of GDPPC. Then, plot() of base graph is used to plot the output.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan_joined$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

We should also examine the full analysis report by printing out the analysis results.

```{r}
print(MI_corr)
```

### 7.2 Geary's C correlogram

Likewise, we will perform the same computation for Geary's C.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan_joined$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

Let's also print out the analysis report.

```{r}
print(GC_corr)
```
