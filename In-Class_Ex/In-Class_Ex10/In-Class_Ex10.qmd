---
title: "In-Class Exercise 10"
author: "Bhairavi Vairavelu"
date: "Nov 09 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# Working with Open Government Data

## 1. Learning Outcome

In this exercise, we will:

-   Prepare data downloaded from REALIS portal for geocoding

-   Geocode using SLA OneMap API

-   Covert the geocoded transaction data into sf point feature data.frame

-   Wrangle the sf point features to avoid overlapping point features

## 2. Loading R Packages

```{r}
pacman::p_load(tidyverse, sf, tmap, httr, performance)
```

## 3. Importing the Data

The code chunk below imports multiple csv files in a specific folder and appends them into a single tibble data frame.

```{r}
folder_path <- "data/aspatial"
file_list <- list.files(path = folder_path, 
                        pattern = "^ResidentialTransaction.*\\.csv$", 
                        full.names = TRUE)

realis_data <- file_list %>%
  map_dfr(read_csv)
```

## 4. Wrangling the Data

The code chunk below performs the following:

-   Converts values in Sale Date field from character to numerical date format

-   Extracts resale and condo transaction records

```{r}
condo_resale <- realis_data %>%
  mutate(`Sale Date` = dmy(`Sale Date`)) %>%
  filter(`Type of Sale` == "Resale" &
           `Property Type` == "Condominium")
```

## 5. Geocoding

We will use the code chunk below to prepare the data:

```{r}
postcode <- unique(condo_resale$`Postal Code`)
```

Next, the code chunk below will be used to perform geocoding:

```{r}
url <- "https://onemap.gov.sg/api/common/elastic/search"
found <- data.frame()
not_found <- data.frame()

for (postcode in postcode){
  query <- list('searchVal'=postcode, 'returnGeom'='Y', 
                'getAddrDetails'='Y', 'pageNum'='1')
  res <- GET(url, query=query)
  if ((content(res)$found)!=0){
    found <- rbind(found, data.frame(content(res))[4:13])
  } else {not_found = data.frame(postcode)
  }
}
```

We can clean up the field names using the code chunk below:

```{r}
found <- found %>%
  select(c(6:8)) %>%
  rename(POSTAL = `results.POSTAL`,
         XCOORD = `results.X`,
         YCOORD = `results.Y`)
```

## 6. Converting to Point Feature Data Frame

The code chunk below will join the condo_reslae and found tables and save it as condo_reslae_geocoded:

```{r}
condo_resale_geocoded = left_join(
  condo_resale, found, 
  by = c('Postal Code' = 'POSTAL'))
```

Next, we will use the code chunk below to convert condo_reslae_geocoded from tibble data frame to sf point feature date frame:

```{r}
condo_resale_sf <- st_as_sf(condo_resale_geocoded, 
                            coords = c("XCOORD",
                                       "YCOORD"),
                            crs=3414)
```

We can also clean up the spatial data by checking if there are overlapping point features, as shown in the code chunk below:

```{r}
overlapping_points <- condo_resale_sf %>%
  mutate(overlap = lengths(st_equals(., .)) > 1)
```

In the code chunk below, st_jitter() of sf package is used to move the point features by 5m to avoid overlapping point features:

```{r}
condo_resale_sf <- condo_resale_sf %>%
  st_jitter(amount = 2)
```

x
