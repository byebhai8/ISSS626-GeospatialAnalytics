---
title: "In-Class Exercise 06"
author: "Bhairavi Vairavelu"
date: "Sep 30 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

## 1. Overview

Emerging Hot Spot Analysis (EHSA) is a spatio-temporal analysis method for revealing and describing how hot spot and cold spot areas evolve over time. The analysis consists of four main steps:

-   Building a space-time cube

-   Calculating Getis-Ord local Gi\* statistics for each bin by using an FDR correction

-   Evaluating these hot and cold spot trends by using Mann-Kendall Test

## 2. Getting Started

Installing and Loading the R packages:

```{r}
pacman::p_load(sf, sfdep, tmap, plotly, tidyverse)
```

As usual, p_load() of pacman package will be used to check if the necessary packages have been installed in R. If yes, we will load the packages on R environment as shown above.

As shown above, 5 R packages are required for this exercise: sf, sfdep, tmap, plotly and tidyverse.

## 3. The Data

Importing the geospatial data:

```{r}
#|eval: false
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
write_rds(hunan, "data/rds/hunan.rds")
```

This code chunk will read the saved rds into R environment:

```{r}
hunan <- read_rds("data/rds/hunan.rds")
```

Importing the attribute table:

```{r}
#|eval: false
GDPPC <- read_csv("data/aspatial/Hunan_GDPPC.csv")
write_rds(GDPPC, "data/rds/GDPPC.rds")
```

This code chunk will read the saved rds into R environment:

```{r}
GDPPC <- read_rds("data/rds/GDPPC.rds")
```

## 4. Creating a Time Series Cube

In the code chunk below, spacetime() of sfdep is used to create a spatio-temporal cube.

```{r}
#|eval: false
GDPPC_st <- spacetime(GDPPC, hunan,
                      .loc_col = "County",
                      .time_col = "Year")
write_rds(GDPPC_st, "data/rds/GDPPC_st.rds")
```

This code chunk will read the saved rds into R environment:

```{r}
GDPPC_st <- read_rds("data/rds/GDPPC_st.rds")
```

Next, is_spacetime_cube() of sfdep package will be used to verify if GDPPC_st is indeed a space-time cube object.

```{r}
is_spacetime_cube(GDPPC_st)
```

The TRUE confirms that GDPPC_st object is indeed a space-time cube.

## 5. Computing Gi\*

Next, we will compute the local Gi& statistics.

### 5.1 Deriving the spatial weights

The code chunk will be used to identify neighbours and to derive an invese distance weight.

```{r}
#|eval: false
GDPPC_nb <- GDPPC_st %>%
  activate("geometry") %>%
  mutate(nb = include_self(
    st_contiguity(geometry)),
    wt = st_inverse_distance(nb,
                             geometry,
                             scale = 1,
                             alpha = 1),
    .before = 1) %>%
  set_nbs("nb") %>%
  set_wts("wt")
write_rds(GDPPC_nb, "data/rds/GDPPC_nb.rds")
```

This code chunk will read the saved rds into R environment:

```{r}
GDPPC_nb <- read_rds("data/rds/GDPPC_nb.rds")
```

### 5.2 Computing Local Gi\*

We will now use the new columns to manually calculate the local Gi\* for each location. We can do this by grouping by Year and using local_gstar_perm() of sfdep package. After which, we use unnest() to unnest gi_star column of the newly created gi_star data frame.

```{r}
#|eval: false
gi_stars <- GDPPC_nb %>%
  group_by(Year) %>%
  mutate(gi_star = local_gstar_perm(
    GDPPC, nb, wt)) %>%
  tidyr::unnest(gi_star)
write_rds(gi_stars, "data/rds/gi_stars.rds")
```

This code chunk will read the saved rds into R environment:

```{r}
gi_stars <- read_rds("data/rds/gi_stars.rds")
```

## 6. Mann-Kendall Test

A monotonic series or function is one that only increases (or decreases) and never changes direction.

With these Gi\* measures, we can evaluate each location for a trend using the Mann-Kendall test. The code chunk below uses Changsha county.

```{r}
#|eval: false
cbg <- gi_stars %>%
  ungroup() %>%
  filter(County == "Changsha") |>
  select(County, Year, gi_star)
write_rds(cbg, "data/rds/cbg.rds")
```

This code chunk will read the saved rds into R environment:

```{r}
cbg <- read_rds("data/rds/cbg.rds")
```

Next, we plot the result by using gglplot2 functions.

```{r}
ggplot(data = cbg,
       aes(x = Year,
           y = gi_star)) +
  geom_line() +
  theme_light()
```

We can also create an interactive plot by using ggplotly() of plotly package:;

```{r}
p <- ggplot(data = cbg,
       aes(x = Year,
           y = gi_star)) +
  geom_line() +
  theme_light()

ggplotly(p)
```

Printing Mann-Kendall test report:

```{r}
cbg %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>%
  tidyr::unnest_wider(mk)
```

In the above result, sl is the p-value. With reference to the results, we will reject the hypothesis null and infer that a slight upward trend.

We can replicate this for each location by using group_by() of dplyr package:

```{r}
ehsa <- gi_stars %>%
  group_by(County) %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>%
  tidyr::unnest_wider(mk)
head(ehsa)
```

## 7. Performing Emerging Hotspot Analysis

Specifying 99 means 100 simulations:

```{r}
ehsa <- emerging_hotspot_analysis(
  x = GDPPC_st,
  .var = "GDPPC",
  k = 1,
  nsim = 99
)
```

Visualizing the distribution of EHSA classes:

```{r}
ggplot(data = ehsa,
       aes(x = classification)) +
  geom_bar()
```

We need to join both hunan and ehsa together by using the code chunk below.

```{r}
#|eval: false
hunan_ehsa <- hunan %>%
  left_join(ehsa,
            by = join_by(County == location))
write_rds(hunan_ehsa, "data/rds/hunan_ehsa.rds")
```

This code chunk will read the saved rds into R environment:

```{r}
hunan_ehsa <- read_rds("data/rds/hunan_ehsa.rds")
```

tmap function will be used to plot a categorical choropleth map by using the code chunk below.

```{r}
ehsa_sig <- hunan_ehsa %>%
  filter(p_value < 0.05)
tmap_mode("plot")
tm_shape(hunan_ehsa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(ehsa_sig) +
  tm_fill("classification") +
  tm_borders(alpha = 0.4)
```

x
